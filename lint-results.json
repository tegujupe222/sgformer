
> sgformer@1.0.0 lint
> eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0 --format json

[{"filePath":"/Users/igasaki/Desktop/sgformer/api/submissions.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3164,3199],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { VercelRequest, VercelResponse } from '@vercel/node';\n\n// 型定義\ninterface SubmissionData {\n  formId: string;\n  userName: string;\n  userEmail: string;\n  answers: Array<{\n    questionId: string;\n    value: string | string[] | number | boolean;\n  }>;\n  selectedOptionId?: string;\n  status?: 'pending' | 'approved' | 'rejected';\n  adminNotes?: string;\n}\n\n// 一時的なデータストア（本番ではVercel KVやPlanetScaleなどに置き換え）\nconst submissions: SubmissionData[] = [];\n\nexport default function handler(req: VercelRequest, res: VercelResponse) {\n  // CORS設定\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader(\n    'Access-Control-Allow-Methods',\n    'GET, POST, PUT, DELETE, OPTIONS'\n  );\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  try {\n    if (req.method === 'POST') {\n      // フォーム送信の保存\n      const formData = req.body;\n      const newSubmission: SubmissionData = {\n        formId: formData.formId || '',\n        userName: formData.userName || '',\n        userEmail: formData.userEmail || '',\n        answers: formData.answers || [],\n        selectedOptionId: formData.selectedOptionId,\n      };\n\n      submissions.push(newSubmission);\n\n      res.status(200).json({\n        success: true,\n        message: 'フォームが正常に送信されました',\n        submissionId: newSubmission.formId, // Assuming formId is the submission ID for now\n      });\n    } else if (req.method === 'GET') {\n      // 全送信内容の取得（管理者用）\n      const { status, eventName } = req.query;\n\n      const filteredSubmissions = [...submissions];\n\n      if (status) {\n        // This filtering logic needs to be adapted to the new SubmissionData structure\n        // For now, we'll just return all submissions if status is provided\n        // In a real application, you'd filter by a status field if it existed\n      }\n\n      if (eventName) {\n        // This filtering logic needs to be adapted to the new SubmissionData structure\n        // For now, we'll just return all submissions if eventName is provided\n        // In a real application, you'd filter by an eventName field if it existed\n      }\n\n      res.status(200).json({\n        success: true,\n        submissions: filteredSubmissions,\n        total: filteredSubmissions.length,\n      });\n    } else if (req.method === 'PUT') {\n      // 送信内容の更新（管理者用）\n      const { id } = req.query;\n      const { status, adminNotes } = req.body;\n\n      const submissionIndex = submissions.findIndex(s => s.formId === id);\n\n      if (submissionIndex === -1) {\n        res\n          .status(404)\n          .json({ success: false, message: '送信内容が見つかりません' });\n        return;\n      }\n\n      submissions[submissionIndex] = {\n        ...submissions[submissionIndex],\n        status: status || submissions[submissionIndex].status,\n        adminNotes: adminNotes || submissions[submissionIndex].adminNotes,\n      };\n\n      res.status(200).json({\n        success: true,\n        message: '送信内容が更新されました',\n        submission: submissions[submissionIndex],\n      });\n    } else {\n      res.status(405).json({ success: false, message: 'Method not allowed' });\n    }\n  } catch (error) {\n    console.error('API Error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'サーバーエラーが発生しました',\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/admin/AdminDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'actions' is assigned a value but never used.","line":27,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'actions' is assigned a value but never used.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1863,1866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1863,1866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useApp } from '../../context/AppContext';\nimport { EventForm } from '../../types';\nimport { useTranslation } from '../../utils/i18n';\nimport AdminSidebar from './AdminSidebar';\n\nconst AdminDashboard: React.FC = () => {\n  const { forms, getSubmissionsByFormId } = useApp();\n  const navigate = useNavigate();\n  const { admin } = useTranslation();\n\n  const handleDelete = (formId: string, formTitle: string) => {\n    if (\n      window.confirm(\n        `${admin('confirmDelete')} \"${formTitle}\" ${admin('deleteWarning')}`\n      )\n    ) {\n      // deleteForm(formId); // This line was removed from imports, so it's removed here.\n    }\n  };\n\n  const handleFormClick = (form: EventForm) => {\n    navigate(`/admin/form/${form.id}`);\n  };\n\n  const actions = (\n    <div className=\"flex space-x-2\">\n      <button\n        onClick={() => navigate('/admin/create')}\n        className=\"px-4 py-2 bg-brand-primary text-white rounded-lg hover:bg-brand-secondary transition-colors\"\n      >\n        新規作成\n      </button>\n    </div>\n  );\n\n  return (\n    <div className=\"flex\">\n      <AdminSidebar />\n      <div className=\"flex-1\">\n        {/* PageWrapper was removed from imports, so it's removed here. */}\n        {forms.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <h3 className=\"text-xl font-semibold text-gray-700\">\n              {admin('noForms')}\n            </h3>\n            <p className=\"text-gray-500 mt-2\">\n              {admin('createNewForm')}をクリックして開始してください。\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {forms.map(form => {\n              const submissions = getSubmissionsByFormId(form.id);\n              const totalCapacity =\n                form.options?.reduce(\n                  (sum: number, opt: any) => sum + opt.limit,\n                  0\n                ) || 0;\n              const submissionCount = submissions.length;\n              const progress =\n                totalCapacity > 0 ? (submissionCount / totalCapacity) * 100 : 0;\n              return (\n                <div\n                  key={form.id}\n                  className=\"bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-4 transition-all hover:shadow-md hover:border-brand-accent\"\n                >\n                  <div className=\"flex flex-col sm:flex-row justify-between sm:items-center\">\n                    <div>\n                      <h3 className=\"text-lg font-bold text-brand-dark\">\n                        {form.title}\n                      </h3>\n                      <p className=\"text-sm text-gray-500 mt-1\">\n                        {form.description}\n                      </p>\n                      <div className=\"flex items-center text-sm text-gray-600 mt-3\">\n                        {/* UsersIcon was removed from imports, so it's removed here. */}\n                        <span>\n                          {submissionCount} / {totalCapacity}{' '}\n                          {/* submissionsT('submissionId') was removed from imports, so it's removed here. */}\n                        </span>\n                        <div className=\"w-24 h-2 bg-gray-200 rounded-full ml-4 overflow-hidden\">\n                          <div\n                            className=\"h-full bg-blue-500\"\n                            style={{ width: `${progress}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2 mt-4 sm:mt-0\">\n                      <button\n                        onClick={() => handleDelete(form.id, form.title)}\n                        className=\"p-2 text-gray-500 hover:text-red-600 hover:bg-red-100 rounded-full transition-colors\"\n                      >\n                        {/* TrashIcon was removed from imports, so it's removed here. */}\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"24\"\n                          height=\"24\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"2\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          className=\"w-5 h-5\"\n                        >\n                          <path d=\"M3 6h18\" />\n                          <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6\" />\n                          <path d=\"M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" />\n                        </svg>\n                      </button>\n                      <button\n                        onClick={() =>\n                          navigate(`/admin/form/${form.id}/checkin`)\n                        }\n                        className=\"px-3 py-2 text-sm font-medium text-brand-secondary bg-blue-100 rounded-md hover:bg-blue-200 transition-colors flex items-center\"\n                      >\n                        {/* BarcodeIcon was removed from imports, so it's removed here. */}\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"24\"\n                          height=\"24\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"2\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          className=\"w-4 h-4 mr-1\"\n                        >\n                          <path d=\"M12 2L2 12l10 10 9-9-1-1-8-8\" />\n                        </svg>\n                        {/* submissionsT('checkIn') was removed from imports, so it's removed here. */}\n                        Check In\n                      </button>\n                      <button\n                        onClick={() => handleFormClick(form)}\n                        className=\"px-3 py-2 text-sm font-medium text-white bg-brand-secondary rounded-md hover:bg-brand-primary transition-colors flex items-center\"\n                      >\n                        {/* ChevronRightIcon was removed from imports, so it's removed here. */}\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"24\"\n                          height=\"24\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"2\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          className=\"w-4 h-4 ml-1\"\n                        >\n                          <path d=\"m9 18 6-6-6-6\" />\n                        </svg>\n                        {/* common('view') was removed from imports, so it's removed here. */}\n                        {/* common('details') was removed from imports, so it's removed here. */}\n                        View Details\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n        {/* PageWrapper was removed from imports, so it's removed here. */}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/admin/AdminSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/admin/CheckIn.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'submissions' conditional could make the dependencies of useEffect Hook (at line 30) change on every render. To fix this, wrap the initialization of 'submissions' in its own useMemo() Hook.","line":19,"column":9,"nodeType":"VariableDeclarator","endLine":19,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useApp } from '../../context/AppContext';\nimport PageWrapper from '../layout/PageWrapper';\nimport type { Submission } from '../../types';\nimport { ArrowLeftIcon, CheckCircleIcon, BarcodeIcon } from '../ui/Icons';\n\nconst CheckIn: React.FC = () => {\n  const { formId } = useParams<{ formId: string }>();\n  const navigate = useNavigate();\n  const { getFormById, getSubmissionsByFormId, updateSubmission } = useApp();\n  const [barcodeInput, setBarcodeInput] = useState('');\n  const [lastScanned, setLastScanned] = useState<Submission | null>(null);\n  const [error, setError] = useState('');\n  const [attendedList, setAttendedList] = useState<Submission[]>([]);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const form = formId ? getFormById(formId) : undefined;\n  const submissions = formId ? getSubmissionsByFormId(formId) : [];\n\n  useEffect(() => {\n    const currentAttended = submissions\n      .filter(s => s.attended)\n      .sort(\n        (a, b) =>\n          new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime()\n      );\n    setAttendedList(currentAttended);\n    inputRef.current?.focus();\n  }, [submissions]);\n\n  const handleScan = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setLastScanned(null);\n\n    try {\n      const parsedData = JSON.parse(barcodeInput);\n      if (parsedData.submissionId && parsedData.formId) {\n        if (parsedData.formId !== formId) {\n          setError('This ticket is for a different event.');\n          setBarcodeInput('');\n          return;\n        }\n\n        const submission = submissions.find(\n          s => s.id === parsedData.submissionId\n        );\n\n        if (submission) {\n          if (submission.attended) {\n            setError(\n              `This person (${submission.userName}) has already checked in.`\n            );\n          } else {\n            const updatedSubmission = { ...submission, attended: true };\n            updateSubmission(updatedSubmission);\n            setLastScanned(updatedSubmission);\n          }\n        } else {\n          setError('Invalid ticket. Submission not found.');\n        }\n      } else {\n        setError('Invalid barcode data format.');\n      }\n    } catch {\n      setError('Could not read the barcode. Please try again.');\n    }\n    setBarcodeInput('');\n    inputRef.current?.focus();\n  };\n\n  if (!form) return <PageWrapper title=\"Error\">Form not found.</PageWrapper>;\n\n  return (\n    <PageWrapper\n      title={`Check-in for: ${form.title}`}\n      actions={\n        <button\n          onClick={() => navigate(`/admin/dashboard`)}\n          className=\"flex items-center px-3 py-2 text-sm bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-100 transition-colors\"\n        >\n          <ArrowLeftIcon className=\"w-4 h-4 mr-2\" />\n          Dashboard\n        </button>\n      }\n    >\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n        <div className=\"md:col-span-1\">\n          <h3 className=\"font-bold text-lg mb-2\">Scan Barcode</h3>\n          <form onSubmit={handleScan}>\n            <div className=\"relative\">\n              <BarcodeIcon className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                ref={inputRef}\n                type=\"text\"\n                value={barcodeInput}\n                onChange={e => setBarcodeInput(e.target.value)}\n                placeholder=\"Ready to scan...\"\n                className=\"w-full pl-10 pr-4 py-3 text-lg border-2 border-brand-primary rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-accent\"\n                autoFocus\n              />\n            </div>\n          </form>\n          {error && (\n            <p className=\"text-red-600 mt-2 bg-red-100 p-3 rounded-lg\">\n              {error}\n            </p>\n          )}\n          {lastScanned && (\n            <div className=\"mt-4 p-4 bg-green-100 border border-green-400 rounded-lg animate-fade-in\">\n              <div className=\"flex items-center\">\n                <CheckCircleIcon className=\"w-8 h-8 text-green-600 mr-3\" />\n                <div>\n                  <p className=\"font-bold text-green-800\">Check-in Success!</p>\n                  <p className=\"text-green-700\">{lastScanned.userName}</p>\n                  <p className=\"text-sm text-green-600\">\n                    {lastScanned.userEmail}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"md:col-span-2\">\n          <h3 className=\"font-bold text-lg mb-2\">\n            Checked-in Attendees ({attendedList.length})\n          </h3>\n          <div className=\"bg-gray-50 border rounded-lg h-96 overflow-y-auto\">\n            {attendedList.length === 0 ? (\n              <p className=\"text-center text-gray-500 p-8\">\n                No attendees have checked in yet.\n              </p>\n            ) : (\n              <ul className=\"divide-y divide-gray-200\">\n                {attendedList.map(sub => (\n                  <li\n                    key={sub.id}\n                    className=\"p-3 flex justify-between items-center\"\n                  >\n                    <div>\n                      <p className=\"font-medium text-brand-dark\">\n                        {sub.userName}\n                      </p>\n                      <p className=\"text-sm text-gray-500\">{sub.userEmail}</p>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">\n                      {new Date(sub.submittedAt).toLocaleTimeString([], {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                      })}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </div>\n      </div>\n    </PageWrapper>\n  );\n};\n\nexport default CheckIn;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/admin/FormCreator.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3893,3896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3893,3896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4896,4899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4896,4899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleOptionChange' is assigned a value but never used.","line":160,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":160,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleOptionChange' is assigned a value but never used.","line":160,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'handleOptionAdd' is assigned a value but never used.","line":172,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":172,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleOptionAdd' is assigned a value but never used.","line":172,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":172,"endColumn":24}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useApp } from '../../context/AppContext';\nimport PageWrapper from '../layout/PageWrapper';\nimport type { Question, QuestionType, QuestionOption } from '../../types';\nimport { PlusIcon, TrashIcon } from '../ui/Icons';\n\nconst FormCreator: React.FC = () => {\n  const { addForm, updateForm, getFormById } = useApp();\n  const navigate = useNavigate();\n  const { formId } = useParams<{ formId: string }>();\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [allowAnonymous, setAllowAnonymous] = useState(false);\n  const [requireLogin, setRequireLogin] = useState(true);\n  const [maxSubmissions, setMaxSubmissions] = useState<number | undefined>();\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n\n  const isEditing = Boolean(formId);\n\n  const questionTypes: {\n    value: QuestionType;\n    label: string;\n    description: string;\n  }[] = [\n    { value: 'text', label: 'テキスト入力', description: '1行のテキスト入力' },\n    {\n      value: 'textarea',\n      label: 'テキストエリア',\n      description: '複数行のテキスト入力',\n    },\n    {\n      value: 'email',\n      label: 'メールアドレス',\n      description: 'メールアドレス入力',\n    },\n    { value: 'phone', label: '電話番号', description: '電話番号入力' },\n    { value: 'number', label: '数値', description: '数値入力' },\n    {\n      value: 'select',\n      label: 'ドロップダウン選択',\n      description: '選択肢から1つ選択',\n    },\n    { value: 'radio', label: 'ラジオボタン', description: '選択肢から1つ選択' },\n    {\n      value: 'checkbox',\n      label: 'チェックボックス',\n      description: '複数選択可能',\n    },\n    { value: 'date', label: '日付', description: '日付選択' },\n    { value: 'time', label: '時間', description: '時間選択' },\n    { value: 'datetime', label: '日時', description: '日時選択' },\n    {\n      value: 'file',\n      label: 'ファイルアップロード',\n      description: 'ファイルをアップロード',\n    },\n    { value: 'rating', label: '評価', description: '星評価（1-5）' },\n    { value: 'scale', label: 'スケール', description: '数値スケール（1-10）' },\n    { value: 'yesno', label: 'はい/いいえ', description: 'はいまたはいいえ' },\n  ];\n\n  useEffect(() => {\n    if (isEditing && formId) {\n      const existingForm = getFormById(formId);\n      if (existingForm) {\n        setTitle(existingForm.title);\n        setDescription(existingForm.description);\n        setQuestions(existingForm.questions || []);\n        setAllowAnonymous(existingForm.settings?.allowAnonymous || false);\n        setRequireLogin(existingForm.settings?.requireLogin || true);\n        setMaxSubmissions(existingForm.settings?.maxSubmissions);\n        setStartDate(existingForm.settings?.startDate || '');\n        setEndDate(existingForm.settings?.endDate || '');\n      }\n    }\n  }, [formId, isEditing, getFormById]);\n\n  const addQuestion = () => {\n    const newQuestion: Question = {\n      id: `q-${Date.now()}`,\n      type: 'text',\n      label: '',\n      description: '',\n      required: false,\n      isPersonalInfo: false,\n      options: [],\n      validation: {},\n      settings: {},\n    };\n    setQuestions([...questions, newQuestion]);\n  };\n\n  const removeQuestion = (index: number) => {\n    setQuestions(questions.filter((_, i) => i !== index));\n  };\n\n  const handleQuestionChange = (\n    index: number,\n    field: keyof Question,\n    value: string | boolean\n  ) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index] = {\n      ...updatedQuestions[index],\n      [field]: value,\n    };\n    setQuestions(updatedQuestions);\n  };\n\n  const handleValidationChange = (\n    index: number,\n    field: string,\n    value: number\n  ) => {\n    const updatedQuestions = [...questions];\n    if (!updatedQuestions[index].validation) {\n      updatedQuestions[index].validation = {};\n    }\n    (updatedQuestions[index].validation as any)[field] = value;\n    setQuestions(updatedQuestions);\n  };\n\n  const addOption = (questionIndex: number) => {\n    const newQuestions = [...questions];\n    const question = newQuestions[questionIndex];\n    const newOption: QuestionOption = {\n      id: `opt-${Date.now()}`,\n      label: '',\n      value: '',\n    };\n    question.options = [...(question.options || []), newOption];\n    setQuestions(newQuestions);\n  };\n\n  const removeOption = (questionIndex: number, optionIndex: number) => {\n    const newQuestions = [...questions];\n    const question = newQuestions[questionIndex];\n    question.options = question.options?.filter((_, i) => i !== optionIndex);\n    setQuestions(newQuestions);\n  };\n\n  const updateOption = (\n    questionIndex: number,\n    optionIndex: number,\n    field: keyof QuestionOption,\n    value: string | number\n  ) => {\n    const newQuestions = [...questions];\n    const question = newQuestions[questionIndex];\n    if (question.options) {\n      (question.options[optionIndex] as any)[field] = value;\n      setQuestions(newQuestions);\n    }\n  };\n\n  const handleOptionChange = (\n    questionIndex: number,\n    optionIndex: number,\n    text: string\n  ) => {\n    const updatedQuestions = [...questions];\n    if (updatedQuestions[questionIndex].options) {\n      updatedQuestions[questionIndex].options![optionIndex].label = text;\n      setQuestions(updatedQuestions);\n    }\n  };\n\n  const handleOptionAdd = (questionIndex: number) => {\n    const updatedQuestions = [...questions];\n    if (updatedQuestions[questionIndex].options) {\n      const newOptionId = (\n        updatedQuestions[questionIndex].options!.length + 1\n      ).toString();\n      updatedQuestions[questionIndex].options!.push({\n        id: newOptionId,\n        label: `オプション${newOptionId}`,\n        value: `option${newOptionId}`,\n      });\n      setQuestions(updatedQuestions);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (title.trim() === '' || questions.some(q => q.label.trim() === '')) {\n      alert('フォームタイトルとすべての質問のラベルを入力してください。');\n      return;\n    }\n\n    const formToSave = {\n      id: isEditing && formId ? formId : `form-${Date.now()}`,\n      title,\n      description,\n      questions,\n      settings: {\n        allowAnonymous,\n        requireLogin,\n        maxSubmissions,\n        startDate: startDate || undefined,\n        endDate: endDate || undefined,\n        isActive: true,\n      },\n      createdAt: isEditing\n        ? getFormById(formId!)!.createdAt\n        : new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      createdBy: 'admin', // TODO: 実際のユーザーIDに置き換え\n    };\n\n    if (isEditing) {\n      updateForm(formToSave);\n    } else {\n      addForm(formToSave);\n    }\n\n    navigate('/admin/dashboard');\n  };\n\n  const renderQuestionEditor = (question: Question, index: number) => {\n    const needsOptions = ['select', 'radio', 'checkbox'].includes(\n      question.type\n    );\n\n    return (\n      <div\n        key={question.id}\n        className=\"bg-gray-50 rounded-lg border p-4 space-y-4\"\n      >\n        <div className=\"flex justify-between items-start\">\n          <h4 className=\"text-lg font-medium\">質問 {index + 1}</h4>\n          <button\n            type=\"button\"\n            onClick={() => removeQuestion(index)}\n            className=\"p-2 text-gray-400 hover:text-red-600\"\n          >\n            <TrashIcon className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        {/* 質問タイプ選択 */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            質問タイプ\n          </label>\n          <select\n            value={question.type}\n            onChange={e =>\n              handleQuestionChange(\n                index,\n                'type',\n                e.target.value as QuestionType\n              )\n            }\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n          >\n            {questionTypes.map(type => (\n              <option key={type.value} value={type.value}>\n                {type.label} - {type.description}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* 質問ラベル */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            質問ラベル *\n          </label>\n          <input\n            type=\"text\"\n            value={question.label}\n            onChange={e => handleQuestionChange(index, 'label', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n            placeholder=\"質問を入力してください\"\n            required\n          />\n        </div>\n\n        {/* 質問説明 */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            説明（任意）\n          </label>\n          <textarea\n            value={question.description || ''}\n            onChange={e =>\n              handleQuestionChange(index, 'description', e.target.value)\n            }\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n            rows={2}\n            placeholder=\"質問の詳細説明\"\n          />\n        </div>\n\n        {/* 必須・個人情報フラグ */}\n        <div className=\"flex space-x-4\">\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={question.required}\n              onChange={e =>\n                handleQuestionChange(index, 'required', e.target.checked)\n              }\n              className=\"mr-2\"\n            />\n            <span className=\"text-sm text-gray-700\">必須項目</span>\n          </label>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={question.isPersonalInfo}\n              onChange={e =>\n                handleQuestionChange(index, 'isPersonalInfo', e.target.checked)\n              }\n              className=\"mr-2\"\n            />\n            <span className=\"text-sm text-gray-700\">個人情報</span>\n          </label>\n        </div>\n\n        {/* 選択肢（select, radio, checkbox用） */}\n        {needsOptions && (\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <label className=\"block text-sm font-medium text-gray-700\">\n                選択肢\n              </label>\n              <button\n                type=\"button\"\n                onClick={() => addOption(index)}\n                className=\"flex items-center text-sm text-brand-primary hover:text-brand-secondary\"\n              >\n                <PlusIcon className=\"w-4 h-4 mr-1\" />\n                選択肢を追加\n              </button>\n            </div>\n            {question.options?.map((option, optionIndex) => (\n              <div key={option.id} className=\"flex items-center space-x-2\">\n                <input\n                  type=\"text\"\n                  value={option.label}\n                  onChange={e =>\n                    updateOption(index, optionIndex, 'label', e.target.value)\n                  }\n                  className=\"flex-1 px-2 py-1 border border-gray-300 rounded-md\"\n                  placeholder=\"選択肢のラベル\"\n                />\n                <input\n                  type=\"text\"\n                  value={option.value}\n                  onChange={e =>\n                    updateOption(index, optionIndex, 'value', e.target.value)\n                  }\n                  className=\"flex-1 px-2 py-1 border border-gray-300 rounded-md\"\n                  placeholder=\"選択肢の値\"\n                />\n                <input\n                  type=\"number\"\n                  value={option.limit || ''}\n                  onChange={e =>\n                    updateOption(index, optionIndex, 'limit', e.target.value)\n                  }\n                  className=\"w-20 px-2 py-1 border border-gray-300 rounded-md\"\n                  placeholder=\"定員\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => removeOption(index, optionIndex)}\n                  className=\"p-1 text-gray-400 hover:text-red-600\"\n                >\n                  <TrashIcon className=\"w-4 h-4\" />\n                </button>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* バリデーション設定 */}\n        <div className=\"space-y-3\">\n          <h5 className=\"text-sm font-medium text-gray-700\">\n            バリデーション設定\n          </h5>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-xs text-gray-500\">最小文字数</label>\n              <input\n                type=\"number\"\n                value={question.validation?.minLength || ''}\n                onChange={e =>\n                  handleValidationChange(\n                    index,\n                    'minLength',\n                    Number(e.target.value)\n                  )\n                }\n                className=\"w-full px-2 py-1 border border-gray-300 rounded-md\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs text-gray-500\">最大文字数</label>\n              <input\n                type=\"number\"\n                value={question.validation?.maxLength || ''}\n                onChange={e =>\n                  handleValidationChange(\n                    index,\n                    'maxLength',\n                    Number(e.target.value)\n                  )\n                }\n                className=\"w-full px-2 py-1 border border-gray-300 rounded-md\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <PageWrapper title={isEditing ? 'フォームを編集' : '新しいフォームを作成'}>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* 基本情報 */}\n        <div className=\"bg-white rounded-lg border p-6 space-y-4\">\n          <h3 className=\"text-lg font-medium text-gray-900\">基本情報</h3>\n\n          <div>\n            <label\n              htmlFor=\"title\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              フォームタイトル *\n            </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              value={title}\n              onChange={e => setTitle(e.target.value)}\n              className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-primary focus:border-brand-primary\"\n              placeholder=\"例: 2024年度入学希望者アンケート\"\n              required\n            />\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"description\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              説明\n            </label>\n            <textarea\n              id=\"description\"\n              value={description}\n              onChange={e => setDescription(e.target.value)}\n              rows={3}\n              className=\"mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-primary focus:border-brand-primary\"\n              placeholder=\"フォームの目的や説明を入力してください\"\n            />\n          </div>\n        </div>\n\n        {/* フォーム設定 */}\n        <div className=\"bg-white rounded-lg border p-6 space-y-4\">\n          <h3 className=\"text-lg font-medium text-gray-900\">フォーム設定</h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                回答期間\n              </label>\n              <div className=\"space-y-2\">\n                <input\n                  type=\"datetime-local\"\n                  value={startDate}\n                  onChange={e => setStartDate(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n                  placeholder=\"開始日時\"\n                />\n                <input\n                  type=\"datetime-local\"\n                  value={endDate}\n                  onChange={e => setEndDate(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n                  placeholder=\"終了日時\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  最大回答数\n                </label>\n                <input\n                  type=\"number\"\n                  value={maxSubmissions || ''}\n                  onChange={e =>\n                    setMaxSubmissions(\n                      e.target.value ? Number(e.target.value) : undefined\n                    )\n                  }\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n                  placeholder=\"制限なし\"\n                  min=\"1\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={allowAnonymous}\n                    onChange={e => setAllowAnonymous(e.target.checked)}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm text-gray-700\">匿名回答を許可</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={requireLogin}\n                    onChange={e => setRequireLogin(e.target.checked)}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm text-gray-700\">ログイン必須</span>\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 質問項目 */}\n        <div className=\"bg-white rounded-lg border p-6 space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-medium text-gray-900\">質問項目</h3>\n            <button\n              type=\"button\"\n              onClick={addQuestion}\n              className=\"flex items-center px-4 py-2 bg-brand-primary text-white font-semibold rounded-lg shadow-md hover:bg-brand-secondary\"\n            >\n              <PlusIcon className=\"w-5 h-5 mr-2\" />\n              質問を追加\n            </button>\n          </div>\n\n          {questions.length === 0 ? (\n            <p className=\"text-gray-500 text-center py-8\">\n              質問を追加してください\n            </p>\n          ) : (\n            <div className=\"space-y-4\">\n              {questions.map((question, index) =>\n                renderQuestionEditor(question, index)\n              )}\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-end space-x-3 pt-4\">\n          <button\n            type=\"button\"\n            onClick={() => navigate('/admin/dashboard')}\n            className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300\"\n          >\n            キャンセル\n          </button>\n          <button\n            type=\"submit\"\n            className=\"px-6 py-2 bg-brand-primary text-white font-semibold rounded-md shadow-sm hover:bg-brand-secondary\"\n          >\n            {isEditing ? '変更を保存' : 'フォームを作成'}\n          </button>\n        </div>\n      </form>\n    </PageWrapper>\n  );\n};\n\nexport default FormCreator;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/admin/SubmissionsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/auth/Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[298,301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[298,301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[741,787],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useCallback } from 'react';\nimport { useApp } from '../../context/AppContext';\nimport { GoogleIcon } from '../ui/Icons';\nimport { useTranslation } from '../../utils/i18n';\nimport { useNavigate } from 'react-router-dom';\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\ninterface GoogleCredentialResponse {\n  credential: string;\n}\n\nconst Login: React.FC = () => {\n  const { login, isLoading, error } = useApp();\n  const navigate = useNavigate();\n  const { auth, app } = useTranslation();\n\n  const handleGoogleSignIn = useCallback(\n    async (response: GoogleCredentialResponse) => {\n      try {\n        await login(response.credential);\n        navigate('/dashboard');\n      } catch (error) {\n        console.error('Google sign-in error:', error);\n      }\n    },\n    [login, navigate]\n  );\n\n  useEffect(() => {\n    if (window.google) {\n      window.google.accounts.id.initialize({\n        client_id: process.env.VITE_GOOGLE_CLIENT_ID || '',\n        callback: handleGoogleSignIn,\n      });\n      window.google.accounts.id.renderButton(\n        document.getElementById('google-signin-button') as HTMLElement,\n        { theme: 'outline', size: 'large' }\n      );\n    }\n  }, [handleGoogleSignIn]);\n\n  const handleGoogleLogin = () => {\n    if (window.google) {\n      window.google.accounts.id.prompt();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-brand-primary to-brand-accent p-4\">\n      <div className=\"w-full max-w-md bg-white rounded-2xl shadow-2xl p-8 text-center transform hover:scale-105 transition-transform duration-300\">\n        <h1 className=\"text-4xl font-bold text-brand-dark mb-2\">\n          <span className=\"font-light\">SG</span>former\n        </h1>\n        <p className=\"text-gray-500 mb-8\">{app('tagline')}</p>\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg\">\n            {error}\n          </div>\n        )}\n        <div className=\"space-y-4\">\n          <button\n            onClick={handleGoogleLogin}\n            disabled={isLoading}\n            className=\"w-full flex items-center justify-center px-6 py-3 border border-gray-300 rounded-lg shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-accent transition-all duration-200 transform hover:translate-y-[-2px] disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <GoogleIcon className=\"w-5 h-5 mr-3\" />\n            {isLoading ? 'ログイン中...' : auth('signInWithGoogle')}\n          </button>\n          {/* デモ用ボタンは本番環境では表示しない */}\n          {import.meta.env.DEV && (\n            <>\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-300\" />\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-2 bg-white text-gray-500\">または</span>\n                </div>\n              </div>\n              <button\n                onClick={() => login('demo-user-token')}\n                disabled={isLoading}\n                className=\"w-full flex items-center justify-center px-6 py-3 border border-gray-300 rounded-lg shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-accent transition-all duration-200 transform hover:translate-y-[-2px] disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                一般ユーザー（デモ）\n              </button>\n              <button\n                onClick={() => login('demo-admin-token')}\n                disabled={isLoading}\n                className=\"w-full flex items-center justify-center px-6 py-3 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-brand-secondary hover:bg-brand-primary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-primary transition-all duration-200 transform hover:translate-y-[-2px] disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                管理者（デモ）\n              </button>\n            </>\n          )}\n        </div>\n        <p className=\"text-xs text-gray-400 mt-8\">{auth('demoMessage')}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/layout/PageWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/ui/FileUpload.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'file' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'filename' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2176,2219],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleFileRemove' is assigned a value but never used.","line":123,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleFileRemove' is assigned a value but never used.","line":123,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":179,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":179,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":44}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { uploadApi, UploadedFile } from '../../services/uploadApi';\nimport { UploadIcon, XIcon, FileIcon } from '../ui/Icons';\n\ninterface FileUploadProps {\n  onFileUpload: (file: UploadedFile) => void;\n  onFileRemove?: (filename: string) => void;\n  uploadedFiles?: UploadedFile[];\n  maxSize?: number; // MB\n  accept?: string;\n  multiple?: boolean;\n  className?: string;\n}\n\nconst FileUpload: React.FC<FileUploadProps> = ({\n  onFileUpload,\n  onFileRemove,\n  uploadedFiles = [],\n  multiple = false,\n  accept = '*/*',\n  maxSize = 10,\n  className = '',\n}) => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileSelect = async (files: FileList | null) => {\n    if (!files || files.length === 0) return;\n\n    setError(null);\n    setIsUploading(true);\n\n    try {\n      const fileArray = Array.from(files);\n\n      // ファイルサイズチェック\n      const oversizedFiles = fileArray.filter(\n        file => file.size > maxSize * 1024 * 1024\n      );\n      if (oversizedFiles.length > 0) {\n        throw new Error(\n          `ファイルサイズが大きすぎます。最大${maxSize}MBまでです。`\n        );\n      }\n\n      // ファイルタイプチェック\n      if (accept !== '*/*') {\n        const allowedTypes = accept.split(',').map(type => type.trim());\n        const invalidFiles = fileArray.filter(file => {\n          return !allowedTypes.some(type => {\n            if (type.startsWith('.')) {\n              return file.name.toLowerCase().endsWith(type.toLowerCase());\n            }\n            return file.type.match(new RegExp(type.replace('*', '.*')));\n          });\n        });\n\n        if (invalidFiles.length > 0) {\n          throw new Error('許可されていないファイル形式です。');\n        }\n      }\n\n      if (multiple) {\n        const uploadedFiles = await uploadApi.uploadMultiple(fileArray);\n        uploadedFiles.forEach(file => onFileUpload(file));\n      } else {\n        const uploadedFile = await uploadApi.uploadSingle(fileArray[0]);\n        onFileUpload(uploadedFile);\n      }\n    } catch (error) {\n      console.error('File upload error:', error);\n      setError(\n        error instanceof Error\n          ? error.message\n          : 'ファイルのアップロードに失敗しました。'\n      );\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    handleFileSelect(e.dataTransfer.files);\n  };\n\n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimetype: string) => {\n    if (mimetype.startsWith('image/')) return '🖼️';\n    if (mimetype === 'application/pdf') return '📄';\n    if (mimetype.includes('word')) return '📝';\n    if (mimetype.includes('excel') || mimetype.includes('spreadsheet'))\n      return '📊';\n    if (mimetype.includes('powerpoint') || mimetype.includes('presentation'))\n      return '📽️';\n    return '📁';\n  };\n\n  const handleFileRemove = (_index: number) => {\n    // ファイル削除の処理\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* ファイルアップロードエリア */}\n      <div\n        className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer ${\n          isDragging\n            ? 'border-brand-primary bg-brand-primary/10'\n            : 'border-gray-300 hover:border-brand-primary hover:bg-gray-50'\n        } ${isUploading ? 'opacity-50 cursor-not-allowed' : ''}`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={!isUploading ? handleClick : undefined}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple={multiple}\n          accept={accept}\n          onChange={e => handleFileSelect(e.target.files)}\n          className=\"hidden\"\n        />\n\n        <UploadIcon className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n\n        <div className=\"space-y-2\">\n          <p className=\"text-lg font-medium text-gray-700\">\n            {isUploading\n              ? 'アップロード中...'\n              : 'ファイルをドラッグ&ドロップまたはクリック'}\n          </p>\n          <p className=\"text-sm text-gray-500\">\n            最大{maxSize}MBまで、\n            {accept === '*/*' ? 'すべてのファイル形式' : accept}をサポート\n          </p>\n        </div>\n      </div>\n\n      {/* エラーメッセージ */}\n      {error && (\n        <div className=\"p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg\">\n          {error}\n        </div>\n      )}\n\n      {/* アップロード済みファイル一覧 */}\n      {uploadedFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-gray-700\">\n            アップロード済みファイル\n          </h4>\n          <div className=\"space-y-2\">\n            {uploadedFiles.map((file, index) => (\n              <div\n                key={file.filename}\n                className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-2xl\">{getFileIcon(file.mimetype)}</span>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">\n                      {file.originalname}\n                    </p>\n                    <p className=\"text-sm text-gray-500\">\n                      {formatFileSize(file.size)}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <a\n                    href={file.url}\n                    download={file.originalname}\n                    className=\"p-1 text-gray-400 hover:text-brand-primary transition-colors\"\n                    title=\"ダウンロード\"\n                  >\n                    <FileIcon className=\"w-4 h-4\" />\n                  </a>\n\n                  {onFileRemove && (\n                    <button\n                      onClick={() => onFileRemove(file.filename)}\n                      className=\"p-1 text-gray-400 hover:text-red-500 transition-colors\"\n                      title=\"削除\"\n                    >\n                      <XIcon className=\"w-4 h-4\" />\n                    </button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUpload;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/ui/Icons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/ui/NotificationCenter.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[897,951],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useApp } from '../../context/AppContext';\nimport { BellIcon, XIcon, CheckIcon } from './Icons';\n\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  read: boolean;\n  createdAt: string;\n  priority?: string;\n}\n\nconst NotificationCenter: React.FC = () => {\n  const { user } = useApp();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  const loadNotifications = useCallback(() => {\n    if (!user?.id) return;\n\n    // 通知を取得するAPIコール\n    fetch(`/api/notifications/${user.id}`)\n      .then(res => res.json())\n      .then(data => {\n        setNotifications(data);\n        setUnreadCount(data.filter((n: Notification) => !n.read).length);\n      })\n      .catch(error => {\n        console.error('Failed to load notifications:', error);\n      });\n  }, [user?.id]);\n\n  useEffect(() => {\n    loadNotifications();\n  }, [loadNotifications]);\n\n  const handleMarkAsRead = (_notificationId: string) => {\n    // notificationService.markAsRead(notificationId);\n    loadNotifications();\n  };\n\n  const handleDeleteNotification = (_notificationId: string) => {\n    // notificationService.deleteNotification(notificationId);\n    loadNotifications();\n  };\n\n  const handleMarkAllAsRead = () => {\n    notifications.forEach(notification => {\n      if (!notification.read) {\n        // notificationService.markAsRead(notification.id); // This line was removed as per the edit hint\n      }\n    });\n    loadNotifications();\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-100 border-red-400 text-red-700';\n      case 'high':\n        return 'bg-orange-100 border-orange-400 text-orange-700';\n      case 'medium':\n        return 'bg-blue-100 border-blue-400 text-blue-700';\n      case 'low':\n        return 'bg-gray-100 border-gray-400 text-gray-700';\n      default:\n        return 'bg-gray-100 border-gray-400 text-gray-700';\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (minutes < 1) return '今';\n    if (minutes < 60) return `${minutes}分前`;\n    if (hours < 24) return `${hours}時間前`;\n    if (days < 7) return `${days}日前`;\n    return date.toLocaleDateString('ja-JP');\n  };\n\n  return (\n    <div className={`relative`}>\n      {/* 通知ベルボタン */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"relative p-2 text-gray-600 hover:text-gray-800 transition-colors\"\n      >\n        <BellIcon className=\"w-6 h-6\" />\n        {unreadCount > 0 && (\n          <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n            {unreadCount > 99 ? '99+' : unreadCount}\n          </span>\n        )}\n      </button>\n\n      {/* 通知パネル */}\n      {isOpen && (\n        <div className=\"absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50\">\n          <div className=\"p-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-gray-800\">通知</h3>\n              <div className=\"flex space-x-2\">\n                {unreadCount > 0 && (\n                  <button\n                    onClick={handleMarkAllAsRead}\n                    className=\"text-sm text-blue-600 hover:text-blue-800\"\n                  >\n                    すべて既読\n                  </button>\n                )}\n                <button\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <XIcon className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"max-h-96 overflow-y-auto\">\n            {notifications.length === 0 ? (\n              <div className=\"p-4 text-center text-gray-500\">\n                通知はありません\n              </div>\n            ) : (\n              <div className=\"divide-y divide-gray-200\">\n                {notifications.map(notification => (\n                  <div\n                    key={notification.id}\n                    className={`p-4 hover:bg-gray-50 transition-colors ${\n                      !notification.read ? 'bg-blue-50' : ''\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <h4 className=\"font-medium text-gray-800\">\n                            {notification.title}\n                          </h4>\n                          {!notification.read && (\n                            <span className=\"w-2 h-2 bg-blue-500 rounded-full\"></span>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-2\">\n                          {notification.message}\n                        </p>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-xs text-gray-400\">\n                            {formatTime(notification.createdAt)}\n                          </span>\n                          <span\n                            className={`text-xs px-2 py-1 rounded-full border ${getPriorityColor(\n                              notification.priority || 'low'\n                            )}`}\n                          >\n                            {notification.priority || 'low'}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-1 ml-2\">\n                        {!notification.read && (\n                          <button\n                            onClick={() => handleMarkAsRead(notification.id)}\n                            className=\"p-1 text-gray-400 hover:text-green-600 transition-colors\"\n                            title=\"既読にする\"\n                          >\n                            <CheckIcon className=\"w-4 h-4\" />\n                          </button>\n                        )}\n                        <button\n                          onClick={() =>\n                            handleDeleteNotification(notification.id)\n                          }\n                          className=\"p-1 text-gray-400 hover:text-red-600 transition-colors\"\n                          title=\"削除\"\n                        >\n                          <XIcon className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* オーバーレイ */}\n      {isOpen && (\n        <div className=\"fixed inset-0 z-40\" onClick={() => setIsOpen(false)} />\n      )}\n    </div>\n  );\n};\n\nexport default NotificationCenter;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/user/ConfirmationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/user/EventForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1039,1042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1039,1042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2108,2155],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useApp } from '../../context/AppContext';\nimport PageWrapper from '../layout/PageWrapper';\nimport { ArrowLeftIcon } from '../ui/Icons';\nimport { submitForm } from '../../services/api';\n\nconst EventForm: React.FC = () => {\n  const { formId } = useParams<{ formId: string }>();\n  const navigate = useNavigate();\n  const { user, getFormById, getSubmissionsByFormId, addSubmission } = useApp();\n  const [selectedOptionId, setSelectedOptionId] = useState<string>('');\n  const [error, setError] = useState('');\n\n  if (!formId) return <PageWrapper title=\"Error\">Form not found.</PageWrapper>;\n\n  const form = getFormById(formId);\n  const submissions = getSubmissionsByFormId(formId);\n\n  if (!form) return <PageWrapper title=\"Error\">Form not found.</PageWrapper>;\n\n  const getSubmissionsForOption = (optionId: string) => {\n    return submissions.filter(s => s.selectedOptionId === optionId).length;\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    if (!selectedOptionId) {\n      setError('Please select an option to register.');\n      return;\n    }\n    setError('');\n\n    const formData = {\n      name: user!.name,\n      email: user!.email,\n      eventName: form.title,\n      selectedOptionId,\n      formId: form.id,\n      userId: user!.id,\n      submittedAt: new Date().toISOString(),\n    };\n\n    try {\n      const result = await submitForm(formData);\n\n      if (result.success) {\n        // ローカル状態も更新\n        const newSubmission = {\n          id: result.data?.submissionId || `sub-${Date.now()}`,\n          formId: form.id,\n          userId: user!.id,\n          userName: user!.name,\n          userEmail: user!.email,\n          selectedOptionId,\n          answers: [], // 空のanswers配列を追加\n          submittedAt: new Date().toISOString(),\n          attended: false,\n        };\n\n        addSubmission(newSubmission);\n        navigate(`/user/confirmation/${newSubmission.id}`);\n      } else {\n        setError(result.message || 'フォーム送信に失敗しました');\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n      setError('フォーム送信に失敗しました');\n    }\n  };\n\n  const actions = (\n    <button\n      onClick={() => navigate('/user/dashboard')}\n      className=\"flex items-center px-3 py-2 text-sm bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-100 transition-colors\"\n    >\n      <ArrowLeftIcon className=\"w-4 h-4 mr-2\" />\n      Back to Events\n    </button>\n  );\n\n  return (\n    <PageWrapper title={form.title} actions={actions}>\n      <p className=\"text-gray-600 mb-6\">{form.description}</p>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900\">\n            Choose your session:\n          </h3>\n          <div className=\"mt-4 space-y-3\">\n            {form.options?.map(option => {\n              const submissionCount = getSubmissionsForOption(option.id);\n              const isFull = submissionCount >= option.limit;\n              const isSelected = selectedOptionId === option.id;\n\n              return (\n                <div\n                  key={option.id}\n                  onClick={() => !isFull && setSelectedOptionId(option.id)}\n                  className={`p-4 border rounded-lg transition-all ${\n                    isFull\n                      ? 'bg-gray-200 opacity-70 cursor-not-allowed'\n                      : 'cursor-pointer hover:border-brand-primary'\n                  } ${isSelected ? 'border-brand-primary ring-2 ring-brand-primary' : 'border-gray-300'}`}\n                >\n                  <div className=\"flex justify-between items-center\">\n                    <label\n                      htmlFor={option.id}\n                      className=\"font-medium text-brand-dark\"\n                    >\n                      {option.label}\n                    </label>\n                    <span\n                      className={`text-sm font-semibold ${isFull ? 'text-red-600' : 'text-gray-600'}`}\n                    >\n                      {isFull\n                        ? 'Full'\n                        : `${submissionCount} / ${option.limit} registered`}\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {error && <p className=\"text-red-500\">{error}</p>}\n\n        <div className=\"pt-5\">\n          <button\n            type=\"submit\"\n            disabled={!selectedOptionId}\n            className=\"w-full py-3 px-4 border border-transparent rounded-md shadow-sm text-lg font-medium text-white bg-brand-primary hover:bg-brand-secondary disabled:bg-gray-400 disabled:cursor-not-allowed\"\n          >\n            Submit Registration\n          </button>\n        </div>\n      </form>\n    </PageWrapper>\n  );\n};\n\nexport default EventForm;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/components/user/UserDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/context/AppContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'idToken' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'form' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":60},{"ruleId":"no-unused-vars","severity":2,"message":"'form' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'formId' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'submission' is defined but never used. Allowed unused args must match /^_/u.","line":25,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":55},{"ruleId":"no-unused-vars","severity":2,"message":"'submission' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'submissionId' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'attended' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":59},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'formId' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1925,1971],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2398,2442],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2739,2776],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3078,3116],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3505,3545],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4003,4046],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4487,4530],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4984,5030],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5536,5585],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6091,6138],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":254,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":254,"endColumn":20}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from 'react';\nimport type { User, EventForm, Submission } from '../types';\nimport { authApi, formsApi, submissionsApi, ApiError } from '../services/api';\n\ninterface AppContextType {\n  user: User | null;\n  isLoading: boolean;\n  error: string | null;\n  login: (idToken: string) => Promise<void>;\n  logout: () => Promise<void>;\n  forms: EventForm[];\n  submissions: Submission[];\n  addForm: (\n    form: Omit<EventForm, 'id' | 'createdAt' | 'updatedAt'>\n  ) => Promise<void>;\n  updateForm: (form: EventForm) => Promise<void>;\n  deleteForm: (formId: string) => Promise<void>;\n  addSubmission: (\n    submission: Omit<Submission, 'id' | 'submittedAt'>\n  ) => Promise<void>;\n  updateSubmission: (submission: Submission) => Promise<void>;\n  markAttendance: (submissionId: string, attended: boolean) => Promise<void>;\n  getFormById: (id: string) => EventForm | undefined;\n  getSubmissionsByFormId: (formId: string) => Submission[];\n  getSubmissionById: (id: string) => Submission | undefined;\n  refreshData: () => Promise<void>;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\ntype AppProviderProps = { children: ReactNode };\n\nexport const AppProvider = ({ children }: AppProviderProps) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [forms, setForms] = useState<EventForm[]>([]);\n  const [submissions, setSubmissions] = useState<Submission[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // 初期化時にトークンをチェックしてユーザー情報を取得\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        const token = localStorage.getItem('sgformer-token');\n        if (token) {\n          const { user: userData } = await authApi.getMe();\n          setUser(userData);\n          await loadData();\n        }\n      } catch (error) {\n        console.error('Initialization error:', error);\n        localStorage.removeItem('sgformer-token');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeApp();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      const [formsData, submissionsData] = await Promise.all([\n        formsApi.getForms(),\n        submissionsApi.getSubmissions(),\n      ]);\n      setForms(formsData);\n      setSubmissions(submissionsData);\n    } catch (error) {\n      console.error('Data loading error:', error);\n      setError('データの読み込みに失敗しました');\n    }\n  };\n\n  const login = async (idToken: string) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const { user: userData } = await authApi.googleLogin(idToken);\n      setUser(userData);\n      await loadData();\n    } catch (error) {\n      console.error('Login error:', error);\n      if (error instanceof ApiError) {\n        setError(error.message);\n      } else {\n        setError('ログインに失敗しました');\n      }\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authApi.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      setForms([]);\n      setSubmissions([]);\n      window.location.hash = '/login';\n    }\n  };\n\n  const addForm = async (\n    form: Omit<EventForm, 'id' | 'createdAt' | 'updatedAt'>\n  ) => {\n    try {\n      setError(null);\n      const newForm = await formsApi.createForm(form);\n      setForms(prev => [...prev, newForm]);\n    } catch (error) {\n      console.error('Add form error:', error);\n      if (error instanceof ApiError) {\n        setError(error.message);\n      } else {\n        setError('フォームの作成に失敗しました');\n      }\n      throw error;\n    }\n  };\n\n  const updateForm = async (updatedForm: EventForm) => {\n    try {\n      setError(null);\n      const { id, ...formData } = updatedForm;\n      const updated = await formsApi.updateForm(id, formData);\n      setForms(prev => prev.map(f => (f.id === id ? updated : f)));\n    } catch (error) {\n      console.error('Update form error:', error);\n      if (error instanceof ApiError) {\n        setError(error.message);\n      } else {\n        setError('フォームの更新に失敗しました');\n      }\n      throw error;\n    }\n  };\n\n  const deleteForm = async (formId: string) => {\n    try {\n      setError(null);\n      await formsApi.deleteForm(formId);\n      setForms(prev => prev.filter(f => f.id !== formId));\n      setSubmissions(prev => prev.filter(s => s.formId !== formId));\n    } catch (error) {\n      console.error('Delete form error:', error);\n      if (error instanceof ApiError) {\n        setError(error.message);\n      } else {\n        setError('フォームの削除に失敗しました');\n      }\n      throw error;\n    }\n  };\n\n  const addSubmission = async (\n    submission: Omit<Submission, 'id' | 'submittedAt'>\n  ) => {\n    try {\n      setError(null);\n      const newSubmission = await submissionsApi.createSubmission(submission);\n      setSubmissions(prev => [...prev, newSubmission]);\n    } catch (error) {\n      console.error('Add submission error:', error);\n      if (error instanceof ApiError) {\n        setError(error.message);\n      } else {\n        setError('提出物の作成に失敗しました');\n      }\n      throw error;\n    }\n  };\n\n  const updateSubmission = async (updatedSubmission: Submission) => {\n    try {\n      setError(null);\n      const { id, ...submissionData } = updatedSubmission;\n      const updated = await submissionsApi.updateSubmission(id, submissionData);\n      setSubmissions(prev => prev.map(s => (s.id === id ? updated : s)));\n    } catch (error) {\n      console.error('Update submission error:', error);\n      if (error instanceof ApiError) {\n        setError(error.message);\n      } else {\n        setError('提出物の更新に失敗しました');\n      }\n      throw error;\n    }\n  };\n\n  const markAttendance = async (submissionId: string, attended: boolean) => {\n    try {\n      setError(null);\n      const updated = await submissionsApi.markAttendance(\n        submissionId,\n        attended\n      );\n      setSubmissions(prev =>\n        prev.map(s => (s.id === submissionId ? updated : s))\n      );\n    } catch (error) {\n      console.error('Mark attendance error:', error);\n      if (error instanceof ApiError) {\n        setError(error.message);\n      } else {\n        setError('出席確認の更新に失敗しました');\n      }\n      throw error;\n    }\n  };\n\n  const getFormById = (id: string) => forms.find(f => f.id === id);\n  const getSubmissionsByFormId = (formId: string) =>\n    submissions.filter(s => s.formId === formId);\n  const getSubmissionById = (id: string) => submissions.find(s => s.id === id);\n\n  const refreshData = async () => {\n    await loadData();\n  };\n\n  const value = {\n    user,\n    isLoading,\n    error,\n    login,\n    logout,\n    forms,\n    submissions,\n    addForm,\n    updateForm,\n    deleteForm,\n    addSubmission,\n    updateSubmission,\n    markAttendance,\n    getFormById,\n    getSubmissionsByFormId,\n    getSubmissionById,\n    refreshData,\n  };\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/index.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1726,1729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1726,1729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1736,1739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1736,1739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1746,1749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1746,1749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":64,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":64,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1757,1760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1757,1760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1769,1794],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1992,2038],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport rateLimit from 'express-rate-limit';\nimport dotenv from 'dotenv';\nimport mongoose from 'mongoose';\n\n// ミドルウェアのインポート\nimport { authenticateToken, requireAdmin } from './middleware/auth';\n\n// ルーターのインポート\nimport authRoutes from './routes/auth';\nimport formRoutes from './routes/forms';\nimport submissionRoutes from './routes/submissions';\nimport userRoutes from './routes/users';\nimport uploadRoutes from './routes/upload';\n\n// 環境変数の読み込み\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// MongoDB接続\nmongoose\n  .connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/sgformer')\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.error('MongoDB connection error:', err));\n\n// ミドルウェア\napp.use(helmet());\napp.use(\n  cors({\n    origin: process.env.FRONTEND_URL || 'http://localhost:5173',\n    credentials: true,\n  })\n);\napp.use(morgan('combined'));\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true }));\n\n// レート制限\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15分\n  max: 100, // リクエスト制限\n  message: 'Too many requests from this IP, please try again later.',\n});\napp.use('/api/', limiter);\n\n// ルート\napp.use('/api/auth', authRoutes);\napp.use('/api/forms', authenticateToken, formRoutes);\napp.use('/api/submissions', authenticateToken, submissionRoutes);\napp.use('/api/users', authenticateToken, requireAdmin, userRoutes);\napp.use('/api/upload', uploadRoutes);\n\n// ヘルスチェック\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\n// エラーハンドリング\napp.use((err: any, req: any, res: any, next: any) => {\n  console.error(err.stack);\n  res.status(500).json({ message: 'Something went wrong!' });\n});\n\n// 404ハンドリング\napp.use('*', (req, res) => {\n  res.status(404).json({ message: 'Route not found' });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n\nexport default app;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/middleware/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":69,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\nimport User from '../models/User';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n\ninterface JwtPayload {\n  id: string;\n  email: string;\n  role: string;\n}\n\ninterface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    name: string;\n    role: string;\n  };\n}\n\n// JWTトークン生成\nexport const generateToken = (user: {\n  _id: string;\n  email: string;\n  role: string;\n}) => {\n  return jwt.sign(\n    {\n      id: user._id,\n      email: user.email,\n      role: user.role,\n    },\n    JWT_SECRET,\n    { expiresIn: '7d' }\n  );\n};\n\n// 認証ミドルウェア\nexport const authenticateToken = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    // JWTトークンの検証\n    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\n\n    // ユーザーの存在確認\n    const user = await User.findById(decoded.id);\n    if (!user || !user.isActive) {\n      return res.status(401).json({ message: 'User not found or inactive' });\n    }\n\n    req.user = {\n      id: user._id,\n      email: user.email,\n      name: user.name,\n      role: user.role,\n    };\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid token' });\n  }\n};\n\n// 管理者権限チェックミドルウェア\nexport const requireAdmin = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  if (req.user?.role !== 'admin') {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n  next();\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/middleware/upload.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[302,305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[302,305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[396,399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[396,399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[706,709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[706,709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1629,1632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1629,1632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1654,1657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1654,1657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1664,1667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1664,1667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1675,1678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1675,1678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1722,1725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1722,1725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import multer from 'multer';\nimport path from 'path';\nimport fs from 'fs';\n\n// アップロードディレクトリの作成\nconst uploadDir = path.join(__dirname, '../uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\n// ストレージ設定\nconst storage = multer.diskStorage({\n  destination: (req: any, file: Express.Multer.File, cb: any) => {\n    cb(null, uploadDir);\n  },\n  filename: (req: any, file: Express.Multer.File, cb: any) => {\n    // ファイル名の重複を避けるため、タイムスタンプを追加\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);\n    cb(\n      null,\n      file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname)\n    );\n  },\n});\n\n// ファイルフィルター\nconst fileFilter = (\n  req: any,\n  file: Express.Multer.File,\n  cb: multer.FileFilterCallback\n) => {\n  // 許可するファイルタイプ\n  const allowedTypes = [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n  ];\n\n  if (allowedTypes.includes(file.mimetype)) {\n    cb(null, true);\n  } else {\n    cb(\n      new Error(\n        'Invalid file type. Only images, PDFs, Word documents, and text files are allowed.'\n      )\n    );\n  }\n};\n\n// ファイルサイズ制限（10MB）\nconst limits = {\n  fileSize: 10 * 1024 * 1024,\n};\n\n// 単一ファイルアップロード\nexport const uploadSingle = multer({\n  storage,\n  fileFilter,\n  limits,\n}).single('file');\n\n// 複数ファイルアップロード\nexport const uploadMultiple = multer({\n  storage,\n  fileFilter,\n  limits,\n}).array('files', 5); // 最大5ファイル\n\n// エラーハンドリング付きのミドルウェア\nexport const handleUpload = (uploadMiddleware: any) => {\n  return (req: any, res: any, next: any) => {\n    uploadMiddleware(req, res, (err: any) => {\n      if (err instanceof multer.MulterError) {\n        if (err.code === 'LIMIT_FILE_SIZE') {\n          return res\n            .status(400)\n            .json({ message: 'File too large. Maximum size is 10MB.' });\n        }\n        return res.status(400).json({ message: err.message });\n      } else if (err) {\n        return res.status(400).json({ message: err.message });\n      }\n      next();\n    });\n  };\n};\n\n// ファイル削除用のユーティリティ関数\nexport const deleteFile = (filename: string) => {\n  const filePath = path.join(uploadDir, filename);\n  if (fs.existsSync(filePath)) {\n    fs.unlinkSync(filePath);\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/models/Form.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/models/Submission.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/models/User.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/routes/auth.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1531,1575],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1720,1723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1720,1723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1960,2000],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2306,2344],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2504,2507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2504,2507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2784,2827],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\nimport { OAuth2Client } from 'google-auth-library';\nimport User from '../models/User';\nimport { authenticateToken } from '../middleware/auth';\nimport { Request, Response } from 'express';\nimport jwt from 'jsonwebtoken';\n\nconst router = express.Router();\nconst googleClient = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);\n\ninterface GoogleUser {\n  sub: string;\n  email: string;\n  name: string;\n  picture: string;\n}\n\n// Google認証でログイン\nrouter.post('/google', async (req: Request, res: Response) => {\n  try {\n    const { idToken } = req.body;\n\n    if (!idToken) {\n      return res.status(400).json({ error: 'ID token is required' });\n    }\n\n    // Google IDトークンを検証\n    const ticket = await googleClient.verifyIdToken({\n      idToken,\n      audience: process.env.GOOGLE_CLIENT_ID,\n    });\n\n    const payload = ticket.getPayload() as GoogleUser;\n    if (!payload) {\n      return res.status(401).json({ error: 'Invalid ID token' });\n    }\n\n    // ユーザーを検索または作成\n    let user = await User.findOne({ email: payload.email });\n    if (!user) {\n      user = new User({\n        email: payload.email,\n        name: payload.name,\n        googleId: payload.sub,\n        profilePicture: payload.picture,\n        role: 'user',\n      });\n      await user.save();\n    }\n\n    // JWTトークンを生成\n    const token = jwt.sign(\n      { userId: user._id, email: user.email, role: user.role },\n      process.env.JWT_SECRET || 'fallback-secret',\n      { expiresIn: '7d' }\n    );\n\n    res.json({ token, user });\n  } catch (error) {\n    console.error('Google login error:', error);\n    res.status(500).json({ error: 'Authentication failed' });\n  }\n});\n\n// ユーザー情報取得（認証済みユーザーのみ）\nrouter.get('/me', authenticateToken, async (req: any, res: Response) => {\n  try {\n    const user = await User.findById(req.user?.id).select('-googleId');\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    res.json({ user });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({ error: 'Failed to get user' });\n  }\n});\n\n// ログアウト\nrouter.post(\n  '/logout',\n  authenticateToken,\n  async (req: Request, res: Response) => {\n    try {\n      // クライアント側でトークンを削除するため、サーバー側では特に何もしない\n      res.json({ message: 'Logged out successfully' });\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({ error: 'Logout failed' });\n    }\n  }\n);\n\n// 管理者権限の確認（認証済みユーザーのみ）\nrouter.get(\n  '/admin-check',\n  authenticateToken,\n  async (req: any, res: Response) => {\n    try {\n      const user = await User.findById(req.user?.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      res.json({ isAdmin: true });\n    } catch (error) {\n      console.error('Admin check error:', error);\n      res.status(500).json({ error: 'Admin check failed' });\n    }\n  }\n);\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/routes/forms.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[398,401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[398,401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1683,1724],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3209,3257],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3795,3835],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5036,5079],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6279,6322],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":278,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7047,7090],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":356,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":356,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9243,9289],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\nimport Form from '../models/Form';\nimport Submission from '../models/Submission';\nimport User from '../models/User';\n\nconst router = express.Router();\n\n// フォーム一覧取得（管理者用）\nrouter.get('/', async (req, res) => {\n  try {\n    const { page = 1, limit = 10, search, status } = req.query;\n    const skip = (Number(page) - 1) * Number(limit);\n\n    // 検索条件の構築\n    const filter: any = {};\n\n    if (search) {\n      filter.$or = [\n        { title: { $regex: search, $options: 'i' } },\n        { description: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    if (status === 'active') {\n      filter['settings.isActive'] = true;\n    } else if (status === 'inactive') {\n      filter['settings.isActive'] = false;\n    }\n\n    // 管理者の場合は自分が作成したフォームのみ\n    const user = await User.findOne({ email: req.user.email });\n    if (user?.role === 'admin') {\n      filter.createdBy = user._id;\n    }\n\n    const forms = await Form.find(filter)\n      .populate('createdBy', 'name email')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(Number(limit))\n      .lean();\n\n    const total = await Form.countDocuments(filter);\n\n    // 各フォームの提出数を取得\n    const formsWithSubmissionCount = await Promise.all(\n      forms.map(async form => {\n        const submissionCount = await Submission.countDocuments({\n          formId: form._id,\n        });\n        return {\n          ...form,\n          submissionCount,\n        };\n      })\n    );\n\n    res.json({\n      forms: formsWithSubmissionCount,\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total,\n        pages: Math.ceil(total / Number(limit)),\n      },\n    });\n  } catch (error) {\n    console.error('Get forms error:', error);\n    res.status(500).json({ message: 'Failed to get forms' });\n  }\n});\n\n// 公開フォーム一覧取得（一般ユーザー用）\nrouter.get('/public', async (req, res) => {\n  try {\n    const { page = 1, limit = 10 } = req.query;\n    const skip = (Number(page) - 1) * Number(limit);\n\n    const now = new Date();\n    const forms = await Form.find({\n      'settings.isActive': true,\n      $and: [\n        {\n          $or: [\n            { 'settings.startDate': { $lte: now } },\n            { 'settings.startDate': { $exists: false } },\n          ],\n        },\n        {\n          $or: [\n            { 'settings.endDate': { $gte: now } },\n            { 'settings.endDate': { $exists: false } },\n          ],\n        },\n      ],\n    })\n      .select('title description settings createdAt')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(Number(limit))\n      .lean();\n\n    const total = await Form.countDocuments({\n      'settings.isActive': true,\n      $and: [\n        {\n          $or: [\n            { 'settings.startDate': { $lte: now } },\n            { 'settings.startDate': { $exists: false } },\n          ],\n        },\n        {\n          $or: [\n            { 'settings.endDate': { $gte: now } },\n            { 'settings.endDate': { $exists: false } },\n          ],\n        },\n      ],\n    });\n\n    res.json({\n      forms,\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total,\n        pages: Math.ceil(total / Number(limit)),\n      },\n    });\n  } catch (error) {\n    console.error('Get public forms error:', error);\n    res.status(500).json({ message: 'Failed to get public forms' });\n  }\n});\n\n// フォーム詳細取得\nrouter.get('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const form = await Form.findById(id)\n      .populate('createdBy', 'name email')\n      .lean();\n\n    if (!form) {\n      return res.status(404).json({ message: 'Form not found' });\n    }\n\n    // 提出数を取得\n    const submissionCount = await Submission.countDocuments({ formId: id });\n\n    res.json({\n      ...form,\n      submissionCount,\n    });\n  } catch (error) {\n    console.error('Get form error:', error);\n    res.status(500).json({ message: 'Failed to get form' });\n  }\n});\n\n// フォーム作成\nrouter.post('/', async (req, res) => {\n  try {\n    const { title, description, questions, settings } = req.body;\n\n    // バリデーション\n    if (!title || !questions || questions.length === 0) {\n      return res\n        .status(400)\n        .json({ message: 'Title and questions are required' });\n    }\n\n    const user = await User.findOne({ email: req.user.email });\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    const form = new Form({\n      title,\n      description,\n      questions,\n      settings: {\n        allowAnonymous: settings?.allowAnonymous || false,\n        requireLogin: settings?.requireLogin || true,\n        maxSubmissions: settings?.maxSubmissions,\n        startDate: settings?.startDate\n          ? new Date(settings.startDate)\n          : undefined,\n        endDate: settings?.endDate ? new Date(settings.endDate) : undefined,\n        isActive: settings?.isActive !== false,\n      },\n      createdBy: user._id,\n    });\n\n    await form.save();\n\n    res.status(201).json({\n      message: 'Form created successfully',\n      form,\n    });\n  } catch (error) {\n    console.error('Create form error:', error);\n    res.status(500).json({ message: 'Failed to create form' });\n  }\n});\n\n// フォーム更新\nrouter.put('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { title, description, questions, settings } = req.body;\n\n    const form = await Form.findById(id);\n    if (!form) {\n      return res.status(404).json({ message: 'Form not found' });\n    }\n\n    // 権限チェック\n    const user = await User.findOne({ email: req.user.email });\n    if (!user || form.createdBy.toString() !== user._id.toString()) {\n      return res.status(403).json({ message: 'Permission denied' });\n    }\n\n    // 更新\n    form.title = title || form.title;\n    form.description = description || form.description;\n    form.questions = questions || form.questions;\n\n    if (settings) {\n      form.settings = {\n        ...form.settings,\n        ...settings,\n        startDate: settings.startDate\n          ? new Date(settings.startDate)\n          : form.settings.startDate,\n        endDate: settings.endDate\n          ? new Date(settings.endDate)\n          : form.settings.endDate,\n      };\n    }\n\n    await form.save();\n\n    res.json({\n      message: 'Form updated successfully',\n      form,\n    });\n  } catch (error) {\n    console.error('Update form error:', error);\n    res.status(500).json({ message: 'Failed to update form' });\n  }\n});\n\n// フォーム削除\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const form = await Form.findById(id);\n    if (!form) {\n      return res.status(404).json({ message: 'Form not found' });\n    }\n\n    // 権限チェック\n    const user = await User.findOne({ email: req.user.email });\n    if (!user || form.createdBy.toString() !== user._id.toString()) {\n      return res.status(403).json({ message: 'Permission denied' });\n    }\n\n    // 関連する提出物も削除\n    await Submission.deleteMany({ formId: id });\n\n    // フォーム削除\n    await Form.findByIdAndDelete(id);\n\n    res.json({ message: 'Form deleted successfully' });\n  } catch (error) {\n    console.error('Delete form error:', error);\n    res.status(500).json({ message: 'Failed to delete form' });\n  }\n});\n\n// フォームの統計情報取得\nrouter.get('/:id/stats', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const form = await Form.findById(id);\n    if (!form) {\n      return res.status(404).json({ message: 'Form not found' });\n    }\n\n    // 権限チェック\n    const user = await User.findOne({ email: req.user.email });\n    if (!user || form.createdBy.toString() !== user._id.toString()) {\n      return res.status(403).json({ message: 'Permission denied' });\n    }\n\n    // 統計情報を取得\n    const totalSubmissions = await Submission.countDocuments({ formId: id });\n    const attendedSubmissions = await Submission.countDocuments({\n      formId: id,\n      attended: true,\n    });\n\n    // 最近の提出物\n    const recentSubmissions = await Submission.find({ formId: id })\n      .sort({ submittedAt: -1 })\n      .limit(5)\n      .select('userName userEmail submittedAt attended')\n      .lean();\n\n    // 質問ごとの回答統計\n    const questionStats = await Promise.all(\n      form.questions.map(async question => {\n        if (\n          ['select', 'radio', 'checkbox'].includes(question.type) &&\n          question.options\n        ) {\n          const optionStats = await Promise.all(\n            question.options.map(async option => {\n              const count = await Submission.countDocuments({\n                formId: id,\n                'answers.questionId': question.id,\n                'answers.value': option.value,\n              });\n              return {\n                label: option.label,\n                value: option.value,\n                count,\n              };\n            })\n          );\n          return {\n            questionId: question.id,\n            label: question.label,\n            type: question.type,\n            optionStats,\n          };\n        }\n        return null;\n      })\n    );\n\n    res.json({\n      totalSubmissions,\n      attendedSubmissions,\n      attendanceRate:\n        totalSubmissions > 0\n          ? (attendedSubmissions / totalSubmissions) * 100\n          : 0,\n      recentSubmissions,\n      questionStats: questionStats.filter(Boolean),\n    });\n  } catch (error) {\n    console.error('Get form stats error:', error);\n    res.status(500).json({ message: 'Failed to get form statistics' });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/routes/submissions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[228,231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[228,231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[412,415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[412,415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[929,932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[929,932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1010,1013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1010,1013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1577,1624],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1744,1747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1744,1747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2287,2290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2287,2290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2442,2488],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4698,4701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4698,4701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":254,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":254,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7132,7181],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":260,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7312,7315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7312,7315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7791,7794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7791,7794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":291,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":291,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8130,8179],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":297,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8302,8305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8302,8305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8746,8749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8746,8749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":319,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":319,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8982,9031],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":325,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9172,9175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9172,9175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":334,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9495,9498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9495,9498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":387,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":387,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10956,11006],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":393,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11146,11149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11146,11149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":413,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":413,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11775,11778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11775,11778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":427,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":427,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12076,12125],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\nimport Submission from '../models/Submission';\nimport Form from '../models/Form';\nimport User from '../models/User';\n\nconst router = express.Router();\n\n// 提出物一覧取得（管理者用）\nrouter.get('/', async (req: any, res) => {\n  try {\n    const { page = 1, limit = 10, formId, search, attended } = req.query;\n    const skip = (Number(page) - 1) * Number(limit);\n\n    // 検索条件の構築\n    const filter: any = {};\n\n    if (formId) {\n      filter.formId = formId;\n    }\n\n    if (search) {\n      filter.$or = [\n        { userName: { $regex: search, $options: 'i' } },\n        { userEmail: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    if (attended !== undefined) {\n      filter.attended = attended === 'true';\n    }\n\n    // 管理者の場合は自分が作成したフォームの提出物のみ\n    const user = await User.findOne({ email: req.user.email });\n    if (user?.role === 'admin') {\n      const userForms = await Form.find({ createdBy: user._id as any }).select(\n        '_id'\n      );\n      const formIds = userForms.map((form: any) => form._id);\n      filter.formId = { $in: formIds };\n    }\n\n    const submissions = await Submission.find(filter)\n      .populate('formId', 'title')\n      .populate('userId', 'name email')\n      .sort({ submittedAt: -1 })\n      .skip(skip)\n      .limit(Number(limit))\n      .lean();\n\n    const total = await Submission.countDocuments(filter);\n\n    res.json({\n      submissions,\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total,\n        pages: Math.ceil(total / Number(limit)),\n      },\n    });\n  } catch (error) {\n    console.error('Get submissions error:', error);\n    res.status(500).json({ message: 'Failed to get submissions' });\n  }\n});\n\n// 提出物詳細取得\nrouter.get('/:id', async (req: any, res) => {\n  try {\n    const { id } = req.params;\n    const submission = await Submission.findById(id)\n      .populate('formId', 'title questions')\n      .populate('userId', 'name email')\n      .lean();\n\n    if (!submission) {\n      return res.status(404).json({ message: 'Submission not found' });\n    }\n\n    // 権限チェック\n    const user = await User.findOne({ email: req.user.email });\n    if (user?.role === 'admin') {\n      const form = await Form.findById(submission.formId);\n      if (!form || form.createdBy.toString() !== (user._id as any).toString()) {\n        return res.status(403).json({ message: 'Permission denied' });\n      }\n    }\n\n    res.json(submission);\n  } catch (error) {\n    console.error('Get submission error:', error);\n    res.status(500).json({ message: 'Failed to get submission' });\n  }\n});\n\n// 提出物作成\nrouter.post('/', async (req, res) => {\n  try {\n    const { formId, userName, userEmail, answers, attended = false } = req.body;\n\n    // バリデーション\n    if (!formId || !userName || !userEmail || !answers) {\n      return res.status(400).json({ message: 'Required fields are missing' });\n    }\n\n    // フォームの存在確認\n    const form = await Form.findById(formId);\n    if (!form) {\n      return res.status(404).json({ message: 'Form not found' });\n    }\n\n    // フォームがアクティブかチェック\n    if (!form.settings.isActive) {\n      return res.status(400).json({ message: 'Form is not active' });\n    }\n\n    // 回答期間のチェック\n    const now = new Date();\n    if (form.settings.startDate && now < form.settings.startDate) {\n      return res.status(400).json({ message: 'Form is not yet open' });\n    }\n    if (form.settings.endDate && now > form.settings.endDate) {\n      return res.status(400).json({ message: 'Form is closed' });\n    }\n\n    // 最大提出数のチェック\n    if (form.settings.maxSubmissions) {\n      const currentSubmissions = await Submission.countDocuments({ formId });\n      if (currentSubmissions >= form.settings.maxSubmissions) {\n        return res.status(400).json({ message: 'Maximum submissions reached' });\n      }\n    }\n\n    // ユーザーIDの取得（ログインしている場合）\n    let userId = undefined;\n    if (req.user) {\n      const user = await User.findOne({ email: req.user.email });\n      if (user) {\n        userId = user._id;\n      }\n    }\n\n    // 重複提出のチェック（同じユーザーが同じフォームに複数回提出することを防ぐ）\n    if (userId) {\n      const existingSubmission = await Submission.findOne({ formId, userId });\n      if (existingSubmission) {\n        return res\n          .status(400)\n          .json({ message: 'You have already submitted this form' });\n      }\n    }\n\n    // メールアドレスの重複チェック\n    const existingSubmissionByEmail = await Submission.findOne({\n      formId,\n      userEmail,\n    });\n    if (existingSubmissionByEmail) {\n      return res\n        .status(400)\n        .json({ message: 'This email has already been used for this form' });\n    }\n\n    // 回答のバリデーション\n    const validationErrors = [];\n    for (const question of form.questions) {\n      const answer = answers.find((a: any) => a.questionId === question.id);\n\n      if (question.required && (!answer || !answer.value)) {\n        validationErrors.push(`${question.label} is required`);\n      }\n\n      if (answer && answer.value) {\n        // 文字数制限のチェック\n        if (\n          question.validation?.minLength &&\n          String(answer.value).length < question.validation.minLength\n        ) {\n          validationErrors.push(\n            `${question.label} must be at least ${question.validation.minLength} characters`\n          );\n        }\n        if (\n          question.validation?.maxLength &&\n          String(answer.value).length > question.validation.maxLength\n        ) {\n          validationErrors.push(\n            `${question.label} must be at most ${question.validation.maxLength} characters`\n          );\n        }\n\n        // 数値の範囲チェック\n        if (question.type === 'number' && question.validation) {\n          const numValue = Number(answer.value);\n          if (\n            question.validation.min !== undefined &&\n            numValue < question.validation.min\n          ) {\n            validationErrors.push(\n              `${question.label} must be at least ${question.validation.min}`\n            );\n          }\n          if (\n            question.validation.max !== undefined &&\n            numValue > question.validation.max\n          ) {\n            validationErrors.push(\n              `${question.label} must be at most ${question.validation.max}`\n            );\n          }\n        }\n\n        // メールアドレスの形式チェック\n        if (question.type === 'email') {\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          if (!emailRegex.test(String(answer.value))) {\n            validationErrors.push(\n              `${question.label} must be a valid email address`\n            );\n          }\n        }\n      }\n    }\n\n    if (validationErrors.length > 0) {\n      return res.status(400).json({\n        message: 'Validation errors',\n        errors: validationErrors,\n      });\n    }\n\n    // 提出物の作成\n    const submission = new Submission({\n      formId,\n      userId,\n      userName,\n      userEmail,\n      answers,\n      attended,\n      metadata: {\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        referrer: req.get('Referer'),\n      },\n    });\n\n    await submission.save();\n\n    res.status(201).json({\n      message: 'Submission created successfully',\n      submission,\n    });\n  } catch (error) {\n    console.error('Create submission error:', error);\n    res.status(500).json({ message: 'Failed to create submission' });\n  }\n});\n\n// 提出物更新（出席状況の変更など）\nrouter.put('/:id', async (req: any, res) => {\n  try {\n    const { id } = req.params;\n    const { attended } = req.body;\n\n    const submission = await Submission.findById(id);\n    if (!submission) {\n      return res.status(404).json({ message: 'Submission not found' });\n    }\n\n    // 権限チェック\n    const user = await User.findOne({ email: req.user.email });\n    if (user?.role === 'admin') {\n      const form = await Form.findById(submission.formId);\n      if (!form || form.createdBy.toString() !== (user._id as any).toString()) {\n        return res.status(403).json({ message: 'Permission denied' });\n      }\n    }\n\n    // 更新\n    if (attended !== undefined) {\n      submission.attended = attended;\n    }\n\n    await submission.save();\n\n    res.json({\n      message: 'Submission updated successfully',\n      submission,\n    });\n  } catch (error) {\n    console.error('Update submission error:', error);\n    res.status(500).json({ message: 'Failed to update submission' });\n  }\n});\n\n// 提出物削除\nrouter.delete('/:id', async (req: any, res) => {\n  try {\n    const { id } = req.params;\n\n    const submission = await Submission.findById(id);\n    if (!submission) {\n      return res.status(404).json({ message: 'Submission not found' });\n    }\n\n    // 権限チェック\n    const user = await User.findOne({ email: req.user.email });\n    if (user?.role === 'admin') {\n      const form = await Form.findById(submission.formId);\n      if (!form || form.createdBy.toString() !== (user._id as any).toString()) {\n        return res.status(403).json({ message: 'Permission denied' });\n      }\n    }\n\n    await Submission.findByIdAndDelete(id);\n\n    res.json({ message: 'Submission deleted successfully' });\n  } catch (error) {\n    console.error('Delete submission error:', error);\n    res.status(500).json({ message: 'Failed to delete submission' });\n  }\n});\n\n// 提出物のエクスポート（CSV）\nrouter.get('/:formId/export', async (req: any, res) => {\n  try {\n    const { formId } = req.params;\n    const { format = 'csv' } = req.query;\n\n    // 権限チェック\n    const user = await User.findOne({ email: req.user.email });\n    if (user?.role === 'admin') {\n      const form = await Form.findById(formId);\n      if (!form || form.createdBy.toString() !== (user._id as any).toString()) {\n        return res.status(403).json({ message: 'Permission denied' });\n      }\n    }\n\n    const submissions = await Submission.find({ formId })\n      .populate('userId', 'name email')\n      .sort({ submittedAt: -1 })\n      .lean();\n\n    const form = await Form.findById(formId);\n    if (!form) {\n      return res.status(404).json({ message: 'Form not found' });\n    }\n\n    if (format === 'csv') {\n      // CSVヘッダーの作成\n      const headers = ['提出日時', '名前', 'メールアドレス', '出席状況'];\n      form.questions.forEach(question => {\n        headers.push(question.label);\n      });\n\n      // CSVデータの作成\n      const csvData = submissions.map(submission => {\n        const row = [\n          new Date(submission.submittedAt).toLocaleString('ja-JP'),\n          submission.userName,\n          submission.userEmail,\n          submission.attended ? '出席' : '欠席',\n        ];\n\n        form.questions.forEach(question => {\n          const answer = submission.answers.find(\n            a => a.questionId === question.id\n          );\n          row.push(answer ? String(answer.value) : '');\n        });\n\n        return row.join(',');\n      });\n\n      const csv = [headers.join(','), ...csvData].join('\\n');\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader(\n        'Content-Disposition',\n        `attachment; filename=\"submissions_${formId}.csv\"`\n      );\n      res.send(csv);\n    } else {\n      res.json({ submissions });\n    }\n  } catch (error) {\n    console.error('Export submissions error:', error);\n    res.status(500).json({ message: 'Failed to export submissions' });\n  }\n});\n\n// 出席確認エンドポイント\nrouter.patch('/:id/attendance', async (req: any, res) => {\n  try {\n    const { id } = req.params;\n    const { attended } = req.body;\n\n    if (typeof attended !== 'boolean') {\n      return res\n        .status(400)\n        .json({ message: 'attended must be a boolean value' });\n    }\n\n    const submission = await Submission.findById(id);\n    if (!submission) {\n      return res.status(404).json({ message: 'Submission not found' });\n    }\n\n    // 権限チェック\n    const user = await User.findOne({ email: req.user.email });\n    if (user?.role === 'admin') {\n      const form = await Form.findById(submission.formId);\n      if (!form || form.createdBy.toString() !== (user._id as any).toString()) {\n        return res.status(403).json({ message: 'Permission denied' });\n      }\n    }\n\n    // 出席状況を更新\n    submission.attended = attended;\n    await submission.save();\n\n    res.json({\n      message: 'Attendance updated successfully',\n      submission,\n    });\n  } catch (error) {\n    console.error('Update attendance error:', error);\n    res.status(500).json({ message: 'Failed to update attendance' });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/routes/upload.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[352,355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[352,355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[821,864],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1050,1053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1050,1053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1570,1622],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1939,1982],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2084,2129],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2274,2277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2274,2277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":96,"column":16,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":96,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2680,2725],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2866,2869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2866,2869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":115,"column":16,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":115,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3572,3575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3572,3575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3580,3583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3580,3583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3686,3727],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\nimport path from 'path';\nimport {\n  handleUpload,\n  uploadSingle,\n  uploadMultiple,\n  deleteFile,\n} from '../middleware/upload';\nimport { authenticateToken } from '../middleware/auth';\n\nconst router = express.Router();\n\n// 単一ファイルアップロード\nrouter.post(\n  '/single',\n  authenticateToken,\n  handleUpload(uploadSingle),\n  (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      res.json({\n        message: 'File uploaded successfully',\n        file: {\n          filename: req.file.filename,\n          originalname: req.file.originalname,\n          mimetype: req.file.mimetype,\n          size: req.file.size,\n          url: `/api/upload/files/${req.file.filename}`,\n        },\n      });\n    } catch (error) {\n      console.error('File upload error:', error);\n      res.status(500).json({ message: 'Failed to upload file' });\n    }\n  }\n);\n\n// 複数ファイルアップロード\nrouter.post(\n  '/multiple',\n  authenticateToken,\n  handleUpload(uploadMultiple),\n  (req: any, res) => {\n    try {\n      if (!req.files || req.files.length === 0) {\n        return res.status(400).json({ message: 'No files uploaded' });\n      }\n\n      const files = req.files.map((file: any) => ({\n        filename: file.filename,\n        originalname: file.originalname,\n        mimetype: file.mimetype,\n        size: file.size,\n        url: `/api/upload/files/${file.filename}`,\n      }));\n\n      res.json({\n        message: 'Files uploaded successfully',\n        files,\n      });\n    } catch (error) {\n      console.error('Multiple file upload error:', error);\n      res.status(500).json({ message: 'Failed to upload files' });\n    }\n  }\n);\n\n// ファイルダウンロード\nrouter.get('/files/:filename', (req, res) => {\n  try {\n    const { filename } = req.params;\n    const filePath = path.join(__dirname, '../uploads', filename);\n\n    res.download(filePath, err => {\n      if (err) {\n        console.error('File download error:', err);\n        res.status(404).json({ message: 'File not found' });\n      }\n    });\n  } catch (error) {\n    console.error('File download error:', error);\n    res.status(500).json({ message: 'Failed to download file' });\n  }\n});\n\n// ファイル削除\nrouter.delete('/files/:filename', authenticateToken, (req: any, res) => {\n  try {\n    const { filename } = req.params;\n\n    // ファイルの存在確認\n    const filePath = path.join(__dirname, '../uploads', filename);\n    const fs = require('fs');\n\n    if (!fs.existsSync(filePath)) {\n      return res.status(404).json({ message: 'File not found' });\n    }\n\n    // ファイル削除\n    deleteFile(filename);\n\n    res.json({ message: 'File deleted successfully' });\n  } catch (error) {\n    console.error('File deletion error:', error);\n    res.status(500).json({ message: 'Failed to delete file' });\n  }\n});\n\n// アップロードされたファイル一覧取得\nrouter.get('/files', authenticateToken, (req: any, res) => {\n  try {\n    const fs = require('fs');\n    const uploadDir = path.join(__dirname, '../uploads');\n\n    if (!fs.existsSync(uploadDir)) {\n      return res.json({ files: [] });\n    }\n\n    const files = fs\n      .readdirSync(uploadDir)\n      .filter((file: string) => {\n        const filePath = path.join(uploadDir, file);\n        return fs.statSync(filePath).isFile();\n      })\n      .map((file: string) => {\n        const filePath = path.join(uploadDir, file);\n        const stats = fs.statSync(filePath);\n        return {\n          filename: file,\n          size: stats.size,\n          createdAt: stats.birthtime,\n          url: `/api/upload/files/${file}`,\n        };\n      })\n      .sort((a: any, b: any) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    res.json({ files });\n  } catch (error) {\n    console.error('Get files error:', error);\n    res.status(500).json({ message: 'Failed to get files' });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/routes/users.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[404,407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[404,407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1604,1645],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2681,2721],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3710,3758],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4856,4906],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":227,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":227,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5749,5792],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7322,7370],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\nimport User from '../models/User';\nimport Form from '../models/Form';\nimport Submission from '../models/Submission';\n\nconst router = express.Router();\n\n// ユーザー一覧取得（管理者用）\nrouter.get('/', async (req, res) => {\n  try {\n    const { page = 1, limit = 10, search, role, status } = req.query;\n    const skip = (Number(page) - 1) * Number(limit);\n\n    // 検索条件の構築\n    const filter: any = {};\n\n    if (search) {\n      filter.$or = [\n        { name: { $regex: search, $options: 'i' } },\n        { email: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    if (role) {\n      filter.role = role;\n    }\n\n    if (status === 'active') {\n      filter.isActive = true;\n    } else if (status === 'inactive') {\n      filter.isActive = false;\n    }\n\n    const users = await User.find(filter)\n      .select('-googleId')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(Number(limit))\n      .lean();\n\n    const total = await User.countDocuments(filter);\n\n    // 各ユーザーの統計情報を取得\n    const usersWithStats = await Promise.all(\n      users.map(async user => {\n        const formCount = await Form.countDocuments({ createdBy: user._id });\n        const submissionCount = await Submission.countDocuments({\n          userId: user._id,\n        });\n\n        return {\n          ...user,\n          formCount,\n          submissionCount,\n        };\n      })\n    );\n\n    res.json({\n      users: usersWithStats,\n      pagination: {\n        page: Number(page),\n        limit: Number(limit),\n        total,\n        pages: Math.ceil(total / Number(limit)),\n      },\n    });\n  } catch (error) {\n    console.error('Get users error:', error);\n    res.status(500).json({ message: 'Failed to get users' });\n  }\n});\n\n// ユーザー詳細取得\nrouter.get('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const user = await User.findById(id).select('-googleId').lean();\n\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // ユーザーの統計情報を取得\n    const formCount = await Form.countDocuments({ createdBy: id });\n    const submissionCount = await Submission.countDocuments({ userId: id });\n\n    // 最近作成したフォーム\n    const recentForms = await Form.find({ createdBy: id })\n      .sort({ createdAt: -1 })\n      .limit(5)\n      .select('title createdAt')\n      .lean();\n\n    // 最近の提出物\n    const recentSubmissions = await Submission.find({ userId: id })\n      .populate('formId', 'title')\n      .sort({ submittedAt: -1 })\n      .limit(5)\n      .select('formId submittedAt attended')\n      .lean();\n\n    res.json({\n      ...user,\n      formCount,\n      submissionCount,\n      recentForms,\n      recentSubmissions,\n    });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({ message: 'Failed to get user' });\n  }\n});\n\n// ユーザー権限更新\nrouter.put('/:id/role', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { role } = req.body;\n\n    if (!['admin', 'user'].includes(role)) {\n      return res.status(400).json({ message: 'Invalid role' });\n    }\n\n    const user = await User.findById(id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // 自分自身の権限を変更できないようにする\n    const currentUser = await User.findOne({ email: req.user.email });\n    if (currentUser && currentUser._id.toString() === id) {\n      return res.status(400).json({ message: 'Cannot change your own role' });\n    }\n\n    user.role = role;\n    await user.save();\n\n    res.json({\n      message: 'User role updated successfully',\n      user: {\n        id: user._id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        isActive: user.isActive,\n      },\n    });\n  } catch (error) {\n    console.error('Update user role error:', error);\n    res.status(500).json({ message: 'Failed to update user role' });\n  }\n});\n\n// ユーザーアカウントの有効/無効切り替え\nrouter.put('/:id/status', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { isActive } = req.body;\n\n    if (typeof isActive !== 'boolean') {\n      return res.status(400).json({ message: 'isActive must be a boolean' });\n    }\n\n    const user = await User.findById(id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // 自分自身のアカウントを無効化できないようにする\n    const currentUser = await User.findOne({ email: req.user.email });\n    if (currentUser && currentUser._id.toString() === id) {\n      return res\n        .status(400)\n        .json({ message: 'Cannot deactivate your own account' });\n    }\n\n    user.isActive = isActive;\n    await user.save();\n\n    res.json({\n      message: `User account ${isActive ? 'activated' : 'deactivated'} successfully`,\n      user: {\n        id: user._id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        isActive: user.isActive,\n      },\n    });\n  } catch (error) {\n    console.error('Update user status error:', error);\n    res.status(500).json({ message: 'Failed to update user status' });\n  }\n});\n\n// ユーザー削除\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const user = await User.findById(id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // 自分自身を削除できないようにする\n    const currentUser = await User.findOne({ email: req.user.email });\n    if (currentUser && currentUser._id.toString() === id) {\n      return res\n        .status(400)\n        .json({ message: 'Cannot delete your own account' });\n    }\n\n    // ユーザーが作成したフォームを削除\n    await Form.deleteMany({ createdBy: id });\n\n    // ユーザーの提出物を削除\n    await Submission.deleteMany({ userId: id });\n\n    // ユーザーを削除\n    await User.findByIdAndDelete(id);\n\n    res.json({ message: 'User deleted successfully' });\n  } catch (error) {\n    console.error('Delete user error:', error);\n    res.status(500).json({ message: 'Failed to delete user' });\n  }\n});\n\n// システム統計情報取得\nrouter.get('/stats/overview', async (req, res) => {\n  try {\n    const totalUsers = await User.countDocuments();\n    const activeUsers = await User.countDocuments({ isActive: true });\n    const adminUsers = await User.countDocuments({ role: 'admin' });\n\n    const totalForms = await Form.countDocuments();\n    const activeForms = await Form.countDocuments({\n      'settings.isActive': true,\n    });\n\n    const totalSubmissions = await Submission.countDocuments();\n    const attendedSubmissions = await Submission.countDocuments({\n      attended: true,\n    });\n\n    // 最近の登録ユーザー\n    const recentUsers = await User.find()\n      .sort({ createdAt: -1 })\n      .limit(5)\n      .select('name email role createdAt')\n      .lean();\n\n    // 最近作成されたフォーム\n    const recentForms = await Form.find()\n      .populate('createdBy', 'name email')\n      .sort({ createdAt: -1 })\n      .limit(5)\n      .select('title createdBy createdAt')\n      .lean();\n\n    res.json({\n      users: {\n        total: totalUsers,\n        active: activeUsers,\n        admin: adminUsers,\n      },\n      forms: {\n        total: totalForms,\n        active: activeForms,\n      },\n      submissions: {\n        total: totalSubmissions,\n        attended: attendedSubmissions,\n        attendanceRate:\n          totalSubmissions > 0\n            ? (attendedSubmissions / totalSubmissions) * 100\n            : 0,\n      },\n      recentUsers,\n      recentForms,\n    });\n  } catch (error) {\n    console.error('Get system stats error:', error);\n    res.status(500).json({ message: 'Failed to get system statistics' });\n  }\n});\n\nexport default router;\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/server/types/express.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/services/api.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'status' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { User, EventForm, Submission } from '../types';\n\nconst API_BASE_URL =\n  import.meta.env.VITE_API_URL || 'http://localhost:3001/api';\n\nclass ApiError extends Error {\n  constructor(\n    public status: number,\n    message: string\n  ) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nconst handleResponse = async (response: Response) => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      message: 'API request failed',\n    }));\n    throw new ApiError(\n      response.status,\n      errorData.message || 'API request failed'\n    );\n  }\n  return response.json();\n};\n\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('sgformer-token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && { Authorization: `Bearer ${token}` }),\n  };\n};\n\n// 認証関連のAPI\nexport const authApi = {\n  // Google認証でログイン\n  googleLogin: async (\n    idToken: string\n  ): Promise<{ user: User; token: string }> => {\n    const response = await fetch(`${API_BASE_URL}/auth/google`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ idToken }),\n    });\n    const data = await handleResponse(response);\n    localStorage.setItem('sgformer-token', data.token);\n    return data;\n  },\n\n  // ユーザー情報取得\n  getMe: async (): Promise<{ user: User }> => {\n    const response = await fetch(`${API_BASE_URL}/auth/me`, {\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n\n  // 管理者権限チェック\n  checkAdmin: async (): Promise<{ isAdmin: boolean }> => {\n    const response = await fetch(`${API_BASE_URL}/auth/admin-check`, {\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n\n  // ログアウト\n  logout: async (): Promise<void> => {\n    await fetch(`${API_BASE_URL}/auth/logout`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n    });\n    localStorage.removeItem('sgformer-token');\n  },\n};\n\n// フォーム関連のAPI\nexport const formsApi = {\n  // フォーム一覧取得\n  getForms: async (): Promise<EventForm[]> => {\n    const response = await fetch(`${API_BASE_URL}/forms`, {\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n\n  // フォーム詳細取得\n  getForm: async (id: string): Promise<EventForm> => {\n    const response = await fetch(`${API_BASE_URL}/forms/${id}`, {\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n\n  // フォーム作成\n  createForm: async (\n    form: Omit<EventForm, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<EventForm> => {\n    const response = await fetch(`${API_BASE_URL}/forms`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(form),\n    });\n    return handleResponse(response);\n  },\n\n  // フォーム更新\n  updateForm: async (\n    id: string,\n    form: Partial<EventForm>\n  ): Promise<EventForm> => {\n    const response = await fetch(`${API_BASE_URL}/forms/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(form),\n    });\n    return handleResponse(response);\n  },\n\n  // フォーム削除\n  deleteForm: async (id: string): Promise<void> => {\n    const response = await fetch(`${API_BASE_URL}/forms/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n};\n\n// 提出物関連のAPI\nexport const submissionsApi = {\n  // 提出物一覧取得\n  getSubmissions: async (formId?: string): Promise<Submission[]> => {\n    const url = formId\n      ? `${API_BASE_URL}/submissions?formId=${formId}`\n      : `${API_BASE_URL}/submissions`;\n    const response = await fetch(url, {\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n\n  // 提出物詳細取得\n  getSubmission: async (id: string): Promise<Submission> => {\n    const response = await fetch(`${API_BASE_URL}/submissions/${id}`, {\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n\n  // 提出物作成\n  createSubmission: async (\n    submission: Omit<Submission, 'id' | 'submittedAt'>\n  ): Promise<Submission> => {\n    const response = await fetch(`${API_BASE_URL}/submissions`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(submission),\n    });\n    return handleResponse(response);\n  },\n\n  // 提出物更新\n  updateSubmission: async (\n    id: string,\n    submission: Partial<Submission>\n  ): Promise<Submission> => {\n    const response = await fetch(`${API_BASE_URL}/submissions/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(submission),\n    });\n    return handleResponse(response);\n  },\n\n  // 提出物削除\n  deleteSubmission: async (id: string): Promise<void> => {\n    const response = await fetch(`${API_BASE_URL}/submissions/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n\n  // 出席確認\n  markAttendance: async (\n    id: string,\n    attended: boolean\n  ): Promise<Submission> => {\n    const response = await fetch(\n      `${API_BASE_URL}/submissions/${id}/attendance`,\n      {\n        method: 'PATCH',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({ attended }),\n      }\n    );\n    return handleResponse(response);\n  },\n};\n\n// ユーザー関連のAPI（管理者のみ）\nexport const usersApi = {\n  // ユーザー一覧取得\n  getUsers: async (): Promise<User[]> => {\n    const response = await fetch(`${API_BASE_URL}/users`, {\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n\n  // ユーザー詳細取得\n  getUser: async (id: string): Promise<User> => {\n    const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n\n  // ユーザー更新\n  updateUser: async (id: string, user: Partial<User>): Promise<User> => {\n    const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(user),\n    });\n    return handleResponse(response);\n  },\n\n  // ユーザー削除\n  deleteUser: async (id: string): Promise<void> => {\n    const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders(),\n    });\n    return handleResponse(response);\n  },\n};\n\nexport { ApiError };\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/services/mockApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/services/notificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[541,544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[541,544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1200,1203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1200,1203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4239,4407],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4436,4495],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { User, EventForm, Submission } from '../types';\n\n// 通知タイプの定義\nexport type NotificationType =\n  | 'form_submitted'\n  | 'form_updated'\n  | 'attendance_marked'\n  | 'form_deleted'\n  | 'user_registered'\n  | 'system_alert';\n\n// 通知の優先度\nexport type NotificationPriority = 'low' | 'medium' | 'high' | 'urgent';\n\n// 通知インターフェース\nexport interface Notification {\n  id: string;\n  type: NotificationType;\n  title: string;\n  message: string;\n  priority: NotificationPriority;\n  recipientId?: string;\n  recipientEmail?: string;\n  data?: Record<string, any>;\n  read: boolean;\n  createdAt: Date;\n  expiresAt?: Date;\n}\n\n// メール通知の設定\nexport interface EmailConfig {\n  host: string;\n  port: number;\n  secure: boolean;\n  auth: {\n    user: string;\n    pass: string;\n  };\n}\n\n// 通知サービスクラス\nclass NotificationService {\n  private notifications: Notification[] = [];\n  private emailConfig?: EmailConfig;\n\n  constructor(emailConfig?: EmailConfig) {\n    this.emailConfig = emailConfig;\n  }\n\n  // 通知を作成\n  private createNotification(\n    type: NotificationType,\n    title: string,\n    message: string,\n    priority: NotificationPriority = 'medium',\n    recipientId?: string,\n    recipientEmail?: string,\n    data?: Record<string, any>\n  ): Notification {\n    const notification: Notification = {\n      id: this.generateId(),\n      type,\n      title,\n      message,\n      priority,\n      recipientId,\n      recipientEmail,\n      data,\n      read: false,\n      createdAt: new Date(),\n      expiresAt: this.calculateExpiryDate(priority),\n    };\n\n    this.notifications.push(notification);\n    return notification;\n  }\n\n  // ID生成\n  private generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  // 有効期限の計算\n  private calculateExpiryDate(priority: NotificationPriority): Date {\n    const now = new Date();\n    switch (priority) {\n      case 'urgent':\n        return new Date(now.getTime() + 24 * 60 * 60 * 1000); // 1日\n      case 'high':\n        return new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000); // 1週間\n      case 'medium':\n        return new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000); // 1ヶ月\n      case 'low':\n        return new Date(now.getTime() + 90 * 24 * 60 * 60 * 1000); // 3ヶ月\n      default:\n        return new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);\n    }\n  }\n\n  // フォーム提出通知\n  async notifyFormSubmission(\n    submission: Submission,\n    form: EventForm,\n    adminUser: User\n  ): Promise<void> {\n    const notification = this.createNotification(\n      'form_submitted',\n      '新しいフォーム提出',\n      `${submission.userName}さんが「${form.title}」に提出しました。`,\n      'medium',\n      adminUser.id,\n      adminUser.email,\n      { submissionId: submission.id, formId: form.id }\n    );\n\n    // メール通知を送信\n    await this.sendEmailNotification(notification);\n  }\n\n  // 出席確認通知\n  async notifyAttendanceMarked(\n    submission: Submission,\n    form: EventForm,\n    attended: boolean\n  ): Promise<void> {\n    const notification = this.createNotification(\n      'attendance_marked',\n      '出席確認完了',\n      `${submission.userName}さんの出席が${attended ? '確認' : '未確認'}されました。`,\n      'low',\n      undefined,\n      submission.userEmail,\n      { submissionId: submission.id, formId: form.id, attended }\n    );\n\n    // メール通知を送信\n    await this.sendEmailNotification(notification);\n  }\n\n  // フォーム更新通知\n  async notifyFormUpdated(form: EventForm, adminUser: User): Promise<void> {\n    const notification = this.createNotification(\n      'form_updated',\n      'フォーム更新',\n      `「${form.title}」が更新されました。`,\n      'medium',\n      adminUser.id,\n      adminUser.email,\n      { formId: form.id }\n    );\n\n    await this.sendEmailNotification(notification);\n  }\n\n  // システムアラート\n  async notifySystemAlert(\n    title: string,\n    message: string,\n    priority: NotificationPriority = 'high'\n  ): Promise<void> {\n    const notification = this.createNotification(\n      'system_alert',\n      title,\n      message,\n      priority\n    );\n\n    await this.sendEmailNotification(notification);\n  }\n\n  // メール通知の送信\n  private async sendEmailNotification(\n    notification: Notification\n  ): Promise<void> {\n    if (!this.emailConfig || !notification.recipientEmail) {\n      return;\n    }\n\n    try {\n      // 実際のメール送信ロジックをここに実装\n      // nodemailerなどのライブラリを使用\n      console.log('Sending email notification:', {\n        to: notification.recipientEmail,\n        subject: notification.title,\n        body: notification.message,\n      });\n    } catch (error) {\n      console.error('Failed to send email notification:', error);\n    }\n  }\n\n  // 通知の取得\n  getNotifications(\n    userId?: string,\n    unreadOnly: boolean = false\n  ): Notification[] {\n    let filtered = this.notifications;\n\n    if (userId) {\n      filtered = filtered.filter(n => n.recipientId === userId);\n    }\n\n    if (unreadOnly) {\n      filtered = filtered.filter(n => !n.read);\n    }\n\n    // 有効期限切れの通知を除外\n    const now = new Date();\n    filtered = filtered.filter(n => !n.expiresAt || n.expiresAt > now);\n\n    return filtered.sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  // 通知を既読にする\n  markAsRead(notificationId: string): void {\n    const notification = this.notifications.find(n => n.id === notificationId);\n    if (notification) {\n      notification.read = true;\n    }\n  }\n\n  // 通知を削除\n  deleteNotification(notificationId: string): void {\n    this.notifications = this.notifications.filter(\n      n => n.id !== notificationId\n    );\n  }\n\n  // 未読通知数を取得\n  getUnreadCount(userId?: string): number {\n    return this.getNotifications(userId, true).length;\n  }\n\n  // 古い通知をクリーンアップ\n  cleanupExpiredNotifications(): void {\n    const now = new Date();\n    this.notifications = this.notifications.filter(\n      n => !n.expiresAt || n.expiresAt > now\n    );\n  }\n}\n\n// シングルトンインスタンス\nexport const notificationService = new NotificationService();\n\n// 通知テンプレート\nexport const notificationTemplates = {\n  formSubmitted: (userName: string, formTitle: string) => ({\n    title: '新しいフォーム提出',\n    message: `${userName}さんが「${formTitle}」に提出しました。`,\n  }),\n\n  attendanceMarked: (userName: string, attended: boolean) => ({\n    title: '出席確認完了',\n    message: `${userName}さんの出席が${attended ? '確認' : '未確認'}されました。`,\n  }),\n\n  formUpdated: (formTitle: string) => ({\n    title: 'フォーム更新',\n    message: `「${formTitle}」が更新されました。`,\n  }),\n\n  systemAlert: (title: string, message: string) => ({\n    title,\n    message,\n  }),\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/services/pdfService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[77,80],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[77,80],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[107,110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[107,110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2197,2245],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Submission, EventForm } from '../types';\n\ndeclare const jsPDF: any;\ndeclare const JsBarcode: any;\n\nexport const generateTicketPDF = (submission: Submission, form: EventForm) => {\n  const { jsPDF: JSPDF } = jsPDF;\n  const doc = new JSPDF();\n\n  const formOption = form.options?.find(\n    opt => opt.id === submission.selectedOptionId\n  );\n\n  // --- Header ---\n  doc.setFontSize(22);\n  doc.setFont('helvetica', 'bold');\n  doc.text('SGformer Event Ticket', 105, 20, { align: 'center' });\n\n  doc.setFontSize(16);\n  doc.setFont('helvetica', 'normal');\n  doc.text('Reception Confirmation', 105, 30, { align: 'center' });\n  doc.setLineWidth(0.5);\n  doc.line(20, 35, 190, 35);\n\n  // --- Event Details ---\n  doc.setFontSize(14);\n  doc.setFont('helvetica', 'bold');\n  doc.text('Event:', 20, 50);\n  doc.setFont('helvetica', 'normal');\n  doc.text(form.title, 50, 50);\n\n  doc.setFont('helvetica', 'bold');\n  doc.text('Session:', 20, 60);\n  doc.setFont('helvetica', 'normal');\n  doc.text(formOption ? formOption.label : 'N/A', 50, 60);\n\n  // --- Attendee Details ---\n  doc.setFont('helvetica', 'bold');\n  doc.text('Attendee:', 20, 80);\n  doc.setFont('helvetica', 'normal');\n  doc.text(submission.userName, 50, 80);\n\n  doc.setFont('helvetica', 'bold');\n  doc.text('Email:', 20, 90);\n  doc.setFont('helvetica', 'normal');\n  doc.text(submission.userEmail, 50, 90);\n\n  doc.setFont('helvetica', 'bold');\n  doc.text('Submission ID:', 20, 100);\n  doc.setFont('helvetica', 'normal');\n  doc.text(submission.id, 50, 100);\n\n  doc.setLineWidth(0.2);\n  doc.line(20, 110, 190, 110);\n\n  // --- Barcode ---\n  const barcodeCanvas = document.createElement('canvas');\n  try {\n    const barcodeData = JSON.stringify({\n      submissionId: submission.id,\n      formId: submission.formId,\n      userId: submission.userId,\n    });\n    JsBarcode(barcodeCanvas, barcodeData, {\n      format: 'CODE128',\n      displayValue: false,\n      width: 2,\n      height: 50,\n      margin: 10,\n    });\n    doc.addImage(barcodeCanvas.toDataURL('image/png'), 'PNG', 55, 120, 100, 30);\n    doc.setFontSize(10);\n    doc.text('Please present this ticket at the reception desk.', 105, 160, {\n      align: 'center',\n    });\n  } catch (e) {\n    console.error('Failed to generate barcode:', e);\n    doc.text('Barcode generation failed.', 105, 135, { align: 'center' });\n  }\n\n  // --- Footer ---\n  doc.line(20, 270, 190, 270);\n  doc.setFontSize(10);\n  doc.text(`Generated on: ${new Date().toLocaleString()}`, 105, 275, {\n    align: 'center',\n  });\n\n  doc.save(`SGformer-Ticket-${submission.id}.pdf`);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/services/uploadApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/src/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/src/test/__tests__/App.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/src/test/__tests__/FileUpload.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/utils/csvExporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/utils/i18n.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[128,131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[128,131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[220,223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[220,223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[652,702],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[781,839],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jaTranslations from '../locales/ja.json';\n\ntype TranslationKey = string;\ntype TranslationValue = string | Record<string, any>;\n\nclass I18n {\n  private locale: string = 'ja';\n  private translations: Record<string, any> = jaTranslations;\n\n  setLocale(locale: string) {\n    this.locale = locale;\n  }\n\n  getLocale(): string {\n    return this.locale;\n  }\n\n  t(key: TranslationKey, params?: Record<string, string>): string {\n    const keys = key.split('.');\n    let value: TranslationValue = this.translations;\n\n    for (const k of keys) {\n      if (value && typeof value === 'object' && k in value) {\n        value = value[k];\n      } else {\n        console.warn(`Translation key not found: ${key}`);\n        return key;\n      }\n    }\n\n    if (typeof value !== 'string') {\n      console.warn(`Translation value is not a string: ${key}`);\n      return key;\n    }\n\n    // Replace parameters if provided\n    if (params) {\n      return Object.entries(params).reduce((str, [param, replacement]) => {\n        return str.replace(new RegExp(`{${param}}`, 'g'), replacement);\n      }, value);\n    }\n\n    return value;\n  }\n\n  // Helper method for common translations\n  common(key: string, params?: Record<string, string>): string {\n    return this.t(`common.${key}`, params);\n  }\n\n  auth(key: string, params?: Record<string, string>): string {\n    return this.t(`auth.${key}`, params);\n  }\n\n  navigation(key: string, params?: Record<string, string>): string {\n    return this.t(`navigation.${key}`, params);\n  }\n\n  dashboard(key: string, params?: Record<string, string>): string {\n    return this.t(`dashboard.${key}`, params);\n  }\n\n  forms(key: string, params?: Record<string, string>): string {\n    return this.t(`forms.${key}`, params);\n  }\n\n  submissions(key: string, params?: Record<string, string>): string {\n    return this.t(`submissions.${key}`, params);\n  }\n\n  user(key: string, params?: Record<string, string>): string {\n    return this.t(`user.${key}`, params);\n  }\n\n  admin(key: string, params?: Record<string, string>): string {\n    return this.t(`admin.${key}`, params);\n  }\n\n  messages(key: string, params?: Record<string, string>): string {\n    return this.t(`messages.${key}`, params);\n  }\n\n  app(key: string, params?: Record<string, string>): string {\n    return this.t(`app.${key}`, params);\n  }\n}\n\nexport const i18n = new I18n();\n\n// React Hook for translations\nexport const useTranslation = () => {\n  return {\n    t: i18n.t.bind(i18n),\n    common: i18n.common.bind(i18n),\n    auth: i18n.auth.bind(i18n),\n    navigation: i18n.navigation.bind(i18n),\n    dashboard: i18n.dashboard.bind(i18n),\n    forms: i18n.forms.bind(i18n),\n    submissions: i18n.submissions.bind(i18n),\n    user: i18n.user.bind(i18n),\n    admin: i18n.admin.bind(i18n),\n    messages: i18n.messages.bind(i18n),\n    app: i18n.app.bind(i18n),\n    locale: i18n.getLocale(),\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/igasaki/Desktop/sgformer/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
